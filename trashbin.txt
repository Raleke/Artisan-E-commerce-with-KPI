our Artisan Page Team
 
mongodb://
 
localhost:27017/EMPLOYERAPI
 
localhost:27017/EMPLOYERAPI
 
mongodb://127.0.0.1:27017/FinalYearProject
 
m&w=majority&appName=Cluster0
 
ongodb+srv://nnajioformiracle247:cRKe9clUFF0H5VZx@cluster0.zsblk.mongodb.net/employerapi?retryWrites=true
 
const loginAdmin = async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("Received login request for email:", email);

    const admin = await Admin.findOne({ email: email.toLowerCase() });
    console.log("Admin found in database:", admin);

    if (!admin) return res.status(401).json({ msg: "Invalid credentials" });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(401).json({ msg: "Invalid credentials" });

    // Generate JWT token
    const token = jwt.sign(
      { id: admin._id, role: "admin" },
      process.env.JWT_SECRET,
      { expiresIn: "2h" }
    );

    // Send successful response including token
    res.status(200).json({
      msg: "Login successful",
      token,
      admin: {
        id: admin._id,
        email: admin.email,
        name: admin.name,
      },
    });

  } catch (err) {
    console.error("Error during admin login:", err);
    res.status(500).json({ msg: "Server error" });
  }
};
 
   const admin = await Admin.findOne({ email });
 
  email: {
    type: String,
    required: true,
    unique: true,
  },
 
const loginAdmin = async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("Received login request for email:", email); 

    const admin = await Admin.findOne({ email });
    console.log("Admin found in database:", admin); 

    if (!admin) return res.status(401).json({ msg: "Invalid credentials" });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(401).json({ msg: "Invalid credentials" });

    // If login is successful
    res.status(200).json({ msg: "Login successful", admin });
  } catch (err) {
    console.error("Error during admin login:", err);
    res.status(500).json({ msg: "Server error" });
  }
};

    const token = jwt.sign(
      { id: admin._id, role: "admin" },
      process.env.JWT_SECRET,
      { expiresIn: "2h" },
    );

    res.status(200).json({
      token,
      admin: {
        id: admin._id,
        email: admin.email,
        name: admin.name,
      },
    });
  } catch (err) {
    res.status(500).json({ msg: "Server error" });
  }
};
 
/ Log the email input
 
// Log the result of the query
 
  try {
    const { email, password } = req.body;
console.log()
    const admin = await Admin.findOne({ email });
    if (!admin) return res.status(401).json({ msg: "Invalid credentials" });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(401).json({ msg: "Invalid credentials" });
 
mongodb://localhost:27017/EmployerAPI
 
omer Hiring Patterns & Preferences
 
// Sort by most active customers
 

// Get Most In-Demand Skills & Job Categories
 
/ Sort by most requested skill
 
eturn top 10 most in-demand skills
 
// Sort by fastest completion time
 
// Average completion time per artisan
 
// Calculate completion time
 
// Only count completed jobs
 

// Get Average Job Completion Time per Artisan
 
onst express = require("express");
const router = express.Router();
const Job = require("../models/jobSchema");
const adminMiddleware = require("../middleware/adminMiddleware");
 
const Customer = require("../models/customer");

 
dminMiddleware, 
 
dminMiddleware, 
 
getTotalArtisans, getTotalJobs, getUserCounts 
 
/ Register (Only for manual use)
 
// Admin Login
 
module.exports = router;
 
onst router = express.Router();

const express = require("express");
const { registerAdmin, loginAdmin } = require("../controllers/authController");

const router = express.Router();

// Public authentication routes
 
router.get("/dashboard/total-artisans", adminMiddleware, getTotalArtisans);
router.get("/dashboard/total-jobs", adminMiddleware, getTotalJobs);
router.get("/dashboard/user-counts", adminMiddleware, getUserCounts);
 
controllers/adminController
 
middlewares/adminMiddleware
 
// Protected routes (Only accessible to admin users)
 
const express = require("express");
const { registerAdmin, loginAdmin } = require("../controllers/adminController");

const router = express.Router();

router.post("/register", registerAdmin); // Register (Only for manual use)
router.post("/login", loginAdmin); // Admin Login

module.exports = router;
 
// Public Routes
 
// ✅ Login Admin
 
      // Create new admin
 
    // Prevent duplicate emails
 
// ✅ Register Admin (Only for manual creation)
 
// Hash password before saving
 
/ Fixed role
 
module.exports = {  };
 
const Employer = require("../models/employer");

// Get All Employers (No Pagination)
 
module.exports = {  };






 
const Artisan = require("../models/artisan");

// Get All Artisans (No Pagination)
 
// Fetch all jobs
 

// Get All Jobs (No Pagination)
 
const Job = require("../models/jobSchema");

 
markMessageAsRead, getAllMessages, getUnreadMessages
 
// Edit a Review
 
// Delete a Review
 
addJob, applyForJob,updateJob, getRecommendedJobs, cancelJobApplication, updateJobStatus, getAllJobsPaginated ,deleteJob
 
outer.post("/add-job", addJob);

router.post("/apply-job", applyForJob);

router.put("/update/:jobId", updateJob);

router.get("/recommended/:artisanId", getRecommendedJobs);

router.put("/cancel/:jobId/:artisanId", cancelJobApplication);

router.put("/update-status/:jobId", updateJobStatus);

router.get("/jobs", getAllJobsPaginated);

router.delete("/delete/:jobId", deleteJob);

 





 
// Employer leaves a review for an Artisan
 
const cancelJobApplication = async (req, res) => {
    try {
        const { jobId, artisanId } = req.params;

        const job = await Job.findById(jobId);
        if (!job) return res.status(404).json({ msg: "Job not found." });

        job.applications = job.applications.filter(app => app.artisanId.toString() !== artisanId);
        await job.save();

        res.status(200).json({ msg: "Application cancelled successfully." });
    } catch (err) {
        res.status(500).json({ msg: "Server error." });
    }
};
 
onst messageController = require("./controller/messageController");
 
// Add artisan to customer favorites
 
const Review = require("../models/review");

// Leave a review for an artisan
 
// Who wrote the review
 
// Dynamically references Artisan, Employer, or Customer
 
// Dynamically references Artisan, Employer, or Customer
 
/ Who is being reviewed
 
// Get only unread messages for a user
 
// Get all messages for a user (Artisan, Employer, Customer)
 
// Mark a specific message as read
 
const router = express.Router();
 
// 1️⃣ Mark a Message as Read
 
// 2️⃣ Get All Messages for a User (Sent & Received)
 
// 3️⃣ Get Unread Messages for a User
 
// Get all notifications for an employer
 
// Employer sends message to artisan
 
module.exports = { };
 
const Message = require("../models/message");

// 1️⃣ Artisan sends a message to an Employer
 
// 2️⃣ Get Messages Sent by an Artisan
 
// Dynamically references Artisan, Employer, or Customer
 
// Who sent the message
 
// Who received the message
 
// Dynamically references Artisan, Employer, or Customer
 
// Update Artisan Availability
 
const Notification = require("../models/notification");

// Get all notifications for an artisan
 
const Customer = require("../models/customer");
const Artisan = require("../models/artisan");

// 1️⃣ Get Customer Profile
 
// 2️⃣ Customer Hires Artisan
 
module.exports = {  };
 
module.exports = {  };
 
// Hashing should be added
 
const Employer = require("../models/employer");


 
// 1️⃣ Get Employer Profile
 
// Hashing should be added
 
module.exports = { };
 
// Dynamically references Artisan, Employer, or Customer
 
// The user type receiving the notification
 
module.exports = {  };
 
const Job = require("../models/jobSchema");
const Artisan = require("../models/artisan");

// 1️⃣ Employer Updates a Job Posting
 
// 2️⃣ Get Recommended Jobs for an Artisan
 
// 3️⃣ Artisan Cancels Their Job Application
 
// 4️⃣ Employer Updates Job Status (Open, Closed, Filled)
 
const Job = require("../models/jobSchema");
 
module.exports = {  };
 
router.get("/artisan/applied-jobs", getAppliedJobs);
 
module.exports = { getAllArtisans };
 
module.exports = { getAppliedJobs };
 
// Get artisan from token
 



 
module.exports = { getAllJobsPaginated };
 
// View jobs with pagination (20 per page)
 
module.exports = { };
 
// 2️⃣ Search Artisans with Advanced Filters (Add More Filters like Job Type)
 
const Artisan = require("../models/artisan");

 
// 1️⃣ Search Artisans by Skill & Location (Country, State, City)
 
const Artisan = require("../models/artisan");
 
const Artisan = require("../models/artisan);
 
module.exports = { filterJobsByLocation, artisanDashboard };
 
        // Count responses from employers
 
        // Count total job applications
 
// 3️⃣ Artisan filters jobs by state & city
 
// Get unique state values
 
    // Ensure searchParam is a string
 

        // MongoDB query: Find artisans based on job category, skills, or state
 
 // Match job category
 
// Match skills
 
// Match state
 
// Exclude password for security
 
module.exports = { jobSearch };
 
// Reset password using OTP
 
// Send OTP for password reset
 
// Logout
 
// Deactivate account
 
 // View job history
 
// Update profile
 
const express = require("express");
const { uploadCV, registerArtisan, loginArtisan, updateArtisanProfile,
    getJobHistory,
    deactivateAccount,
    logoutArtisan,
    sendOTP,
    resetPassword, } = require("../controller/artisanController");
const artMiddleware = require("../middleware/artMiddleware");

const router = express.Router();


router.post("/register", registerArtisan);


router.post("/login", loginArtisan);

// router.post("/upload",  uploadCV);

router.put("/update-profile", verifyToken, updateArtisanProfile);  // Update profile
router.get("/job-history", verifyToken, getJobHistory);  // View job history
router.put("/deactivate", verifyToken, deactivateAccount);  // Deactivate account
router.post("/logout", logoutArtisan);  // Logout
router.post("/forgot-password", sendOTP);  // Send OTP for password reset
router.post("/reset-password", resetPassword);  // Reset password using OTP


router.get("/profile", artMiddleware, (req, res) => {
    res.json({
        msg: "Access granted",
        artisan: req.artisan, 
    });
});

module.exports = router;
 
artisan
 
 artisan
 
            pass: "akfg isge aqkc pgfg", 
 
EMAIL_USER=  user: "ralekeegan@gmail.com", 
            pass: "akfg isge aqkc pgfg", 
 
our-app-password
 
our-email@gmail.com
 
onst registerArtisan = async (req, res) => {
    console.log("Request Body Before Upload:", req.body);

    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: process.env.EMAIL_USER, 
            pass: process.env.EMAIL_PASSWORD, 
        },
    });

    upload(req, res, async (err) => {
        if (err) {
            console.error("Multer Error:", err.message);
            return res.status(400).json({ msg: err.message });
        }

        console.log("Request Body:", req.body);
        console.log("Uploaded Files:", req.files); 

        const {
            firstName, lastName, email, gender, whatsappNumber, password, phoneNumber,
            streetAddress, city, state, country, dob, jobType, jobCategories, skills,
            yearsOfExperience, artisanDescription, education, workExperience, confirmPassword, confirmPhone
        } = req.body;

        let errors = [];
        if (
            !firstName || !lastName || !email || !gender || !whatsappNumber || !password || 
            !phoneNumber || !streetAddress || !city || !state || !country || !dob ||
            !jobType || !jobCategories || !skills || !yearsOfExperience || !artisanDescription || 
            !education || !workExperience || !confirmPassword || !confirmPhone
        ) {
            errors.push({ msg: "Please fill in all the fields" });
        }

        if (password !== confirmPassword) {
            errors.push({ msg: "Passwords do not match" });
        }

        if (password.length < 8) {
            errors.push({ msg: "Password should be at least 8 characters" });
        }

        if (phoneNumber !== confirmPhone) {
            errors.push({ msg: "Phone number does not match" });
        }

        if (errors.length > 0) {
            return res.status(400).json({ errors });
        }

        try {
            const existingArtisan = await Artisan.findOne({ email });
            if (existingArtisan) {
                return res.status(400).json({ msg: "Email already registered" });
            }

            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);

            const parsedJobCategories = typeof jobCategories === "string" ? JSON.parse(jobCategories) : jobCategories;

            const newArtisan = new Artisan({
                firstName, lastName, email, gender, whatsappNumber, password: hashedPassword,
                phoneNumber, streetAddress, city, state, country, dob, jobType, jobCategories: parsedJobCategories,
                skills, yearsOfExperience, artisanDescription,
                education: {
                    level: education.level,
                    details: education.details,
                },
                workExperience: {
                    hasExperience: workExperience.hasExperience,
                    details: workExperience.details,
                },
                image: req.files.image ? req.files.image[0].filename : null,
                cv: req.files.cv ? req.files.cv[0].filename : null,
            });

            await newArtisan.save();
            res.status(201).json({ msg: "Registration successful" });
            const msg =
            "Dear " +
            firstName +
            " " +
            lastName +
            ", your registration is successful and details successfully captured";

            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: email,
                subject: "Registration Successful",
                text: msg,
            };

            transporter.sendMail(mailOptions, (error, info) => {
                if (error) {
                    console.log(error);
                } else {
                    console.log("Email sent: " + info.response);
                }
            });
        } catch (err) {
            console.error(err.message);
            res.status(500).

 
from: process.env.EMAIL_USER,
 
// 6. Reset Password using OTP
 
/ OTP expires in 10 mins
 
5. Forgot Password - Send OTP
 
// 3. Deactivate Artisan Account (Soft Delete)
 

// 2. Get Artisan's Previous Job History
 
// 1. Update Artisan Profile
 
     // Only update fields that are provided
 
  // Update image and CV if provided
 
pdateArtisanProfile,
 
const updateArtisanProfile = async (req, res) => {
    try {
        const { skills, services, city, state, country } = req.body;
        const artisan = await Artisan.findById(req.artisanId);

        if (!artisan) return res.status(404).json({ msg: "Artisan not found" });

        if (skills) artisan.skills = skills;
        if (services) artisan.services = services;
        if (city) artisan.city = city;
        if (state) artisan.state = state;
        if (country) artisan.country = country;

        await artisan.save();
        res.status(200).json({ msg: "Profile updated successfully", artisan });
    } catch (err) {
        res.status(500).json({ msg: "Server error" });
    }
};
 
applicantEmail
 
applicantName
 
// Database connection
 
// Enable CORS
 
// Body parsers
 
// Set static files directory
 
// Load initial data
 
// Set up view engine
 
const dataController = require('./controller/dataController'); 
 
  // Set up session
 
  // Flash messages middleware
 
// Global variables for flash messages
 
/ Define Routes
 
/ Global error handler
 
 // Start the server
 


require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const ejs = require("ejs");
const session = require("express-session");
const flash = require("connect-flash");
const cors = require("cors");
const path = require("path");




const app = express();


dataController.loadData(() => {

   
    app.set("view engine", "ejs");

   
    app.use(express.static(path.join(__dirname, "public")));

   
    app.use(express.urlencoded({ extended: true }));
    app.use(express.json());

   
    app.use(cors());

   
    const dbURI = process.env.MONGO_URI || "mongodb://127.0.0.1:27017/FinalYearProject";
    mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
        .then(() => console.log("MongoDB connected successfully"))
        .catch((err) => console.error("MongoDB connection error:", err));

    
    app.use(session({
        secret: process.env.SESSION_SECRET || "mysecretkey",
        resave: true,
        saveUninitialized: true,
    }));

    
    app.use(flash());

    
    app.use((req, res, next) => {
        res.locals.message = req.flash("message");
        res.locals.error_msg = req.flash("error_msg");
        next();
    });

    


dataController.loadData(() => {

  // ...

  app.use((err, req, res, next) => {
    logger.error(err.stack);
    res.status(500).send("Something went wrong! Please try again later.");
  });

  // ...

  const PORT = process.env.PORT || 3500;
  app.listen(PORT, () => {
    logger.info(`Server started at port ${PORT
   
    app.use((err, req, res, next) => {
        console.error(err.stack);
        res.status(500).send("Something went wrong! Please try again later.");
    });


    const PORT = process.env.PORT || 3500;
    app.listen(PORT, () => console.log(`Server started at port ${PORT}`));
});

 
  app.use('/api', dataRoutes); 
    app.use('/api/employer', employerRoutes); 
    app.use('/api/artisan', artisanRoutes);
    app.use('/api/customer', customerRoutes);
    app.use('/api/job', jobRoutes);
    app.use('/api/employerDashboard', employerDashboardRoutes);
 
onst dataRoutes = require('./route/dataRoutes'); 
const employerRoutes = require('./route/employerRoute');
const artisanRoutes = require('./route/artisanRoute');
const customerRoutes = require("./route/customerRoute");
const jobRoutes = require("./route/jobRoute");
const employerDashboardRoutes = require("./route/employerDashboardRoute"); // Correct import for employer dashboard
 
// Import Controllers
 
// Import Routes
 
const winston = require('winston');



if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple(),
  }));
}
 
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});
 
// Reference to the Artisan model
 
app.use('/api/employerDashboard', employerDashboardRoutes);
 
const employerDashboardRoutes = require("./controller/employerController");
 
module.exports = router;
 
const express = require("express");
const router = express.Router();
const {
    getJobApplications,
    updateApplicationStatus,
} = require("../controller/employerController");
 
 to: email,
                subject: "Registration Successful",
                text: msg,
 
 from: process.env.EMAIL,
 
// sender gmail address
 
// App password from gmail account
 
  auth: {
                    user: process.env.EMAIL,
                    pass: process.env.EMAIL_PASSWORD,
                },
 
// Update Application Status
 
// Get Job Applications
 
// Login Employer
 
// sender gmail address
 
/ App password from gmail account
 
// Multer Configuration
 
// Single image upload
 
// Register Employer
 
// sender gmail address
 
// App password from gmail account
 
user: process.env.EMAIL,
            pass: process.env.EMAIL_PASSWORD,
 
 if (status === "Employed") {
            const artisan = await Artisan.findById(artisanId);

            console.log(
                `Notification: ${artisan.firstName} ${artisan.lastName} has been employed!`
            );
 
// Update application status (accept/decline an artisan)
 
// Get all job applications for a specific job
 
 auth: {
                    user: process.env.EMAIL,
                    pass: process.env.EMAIL_PASSWORD,
                },
 
    // Send email notification to the artisan
 
  // Send an in-app notification (this depends on your front-end implementation)
 
  // Fetch artisan details
 
  // Update the selected artisan's status
 
  // Set all other applications to Pending
 
// Find the artisan application in the job
 
 // Fetch the job
 
/ Status can be "Employed" or remain "Pending"
 
// Accept or Decline an artisan's application
 
// Populate artisan details
 
// Get job applications for an employer's job
 
const Artisan = require("../models/artisan");
const nodemailer = require("nodemailer");
 
module.exports = {

};
 
const mongoose = require("mongoose");

const jobSchema = new mongoose.Schema({
    companyName: {
        type: String,
        required: true,
    },
    employerEmail: {
        type: String,
        required: true,
    },
    datePosted: {
        type: Date,
        default: Date.now,
    },
    applicationDeadline: {
        type: Date,
        required: true,
    },
    workType: {
        type: String,
        enum: ["Full-time", "Part-time", "Contract"],
        required: true,
    },
    commuteType: {
        type: String,
        enum: ["Onsite", "Remote"],
        required: true,
    },
    location: {
        type: String,
        required: true,
    },
    qualification: {
        type: String,
        default: "SSCE", 
    },
    pay: {
        amount: {
            type: Number,
            required: true,
        },
        frequency: {
            type: String,
            enum: ["Per Day", "Per Job", "Per Week", "Per Month"],
            required: true,
        },
    },
    requiredSkill: {
        type: String,
        required: true,
    },
    slots: {
        type: Number,
        required: true,
    },
    applications: {
        type: Number,
        default: 0, 
    },
    accommodation: {
        type: String,
        enum: ["Yes", "No"],
        required: true,
    },
});

module.exports = mongoose.model("Job", jobSchema);

 
// Route to add a job
 
// Route to apply for a job
 
// sender gmail address
 
/ App password from gmail account
 
 auth: {
                user: process.env.EMAIL, // Your email address from .env
                pass: process.env.EMAIL_PASSWORD, // App password from .env
            },
 
// Notify the employer
 
 // Increment the number of applications
 
// Check if slots are available
 
 // Find the job
 
module.exports = {
    applyForJob,
};
 
// sender gmail address
 
// App password from gmail account
 
  auth: {
                user: process.env.EMAIL, // Your email address from .env
                pass: process.env.EMAIL_PASSWORD, // App password from .env
            },
 
  // Send confirmation email to the employer
 
 // Default is SSCE
 
 // Create a new job
 
  // Verify if the employer exists
 
 // Validate required fields
 
// Default qualification is SSCE
 
// Track the number of applicants
 
const addJob = async (req, res) => {

 
/ Default to NGN
 
// Default to English
 
// Convert "true"/"false" strings to boolean
 
const registerCustomer = async (req, res) => {
    console.log("Request Body Before Upload:", req.body);

    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: "ralekeegan@gmail.com", // sender gmail address
            pass: "akfg isge aqkc pgfg" // App password from gmail account
        },
    });

    upload(req, res, async (err) => {
        if (err) {
            console.error("Multer Error:", err.message);
            return res.status(400).json({ msg: err.message });
        }

        const {
            firstName,
            lastName,
            email,
            phoneNumber,
            whatsappNumber,
            password,
            confirmPassword,
            confirmPhone,
            notifications,
            language,
            currency,
            "address.street": street,
            "address.city": city,
            "address.state": state,
            "address.country": country,
        } = req.body;
        let errors = [];

        
        if (
            !firstName ||
            !lastName ||
            !email ||
            !phoneNumber ||
            !whatsappNumber ||
            !password ||
            !confirmPassword ||
            !street ||
            !city ||
            !state ||
            !country
        ) {
            errors.push({ msg: "Please fill in all the required fields" });
        }

     
        if (password !== confirmPassword) {
            errors.push({ msg: "Passwords do not match" });
        }

        if (password.length < 8) {
            errors.push({ msg: "Password should be at least 8 characters long" });
        }

       
        if (phoneNumber !== confirmPhone) {
            errors.push({ msg: "Phone numbers do not match" });
        }

        if (errors.length > 0) {
            return res.status(400).json({ errors });
        }

        try {
         
            const existingCustomer = await Customer.findOne({ email });
            if (existingCustomer) {
                return res.status(400).json({ msg: "Email is already registered" });
            }    

           
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);

           
            const newCustomer = new Customer({   
                firstName,
                lastName,
                email,
                phoneNumber,
                whatsappNumber,
                password: hashedPassword,
                image: req.files && req.files.image ? {
                    data: req.files.image[0].buffer,
                    contentType: req.files.image[0].mimetype,
                } : null,
                address: {
                    street,
                    city,
                    state,
                    country,
                },
                preferences: {
                    notifications: notifications === "true", 
                    language: language || "en", 
                    currency: currency || "NGN", 
                },
            });

            
            await newCustomer.save();
            res.status(201).json({ msg: "Registration successful" });
        } catch (err) {
            console.error("Server Error:", err.message);
            res.status(500).json({ msg: "Server error" });
        }

        let msg = "Dear " + fn + " " + ln + ", your registration is successful and Details successfully captured"


                    const mailOptions = {
 
                      from: "ralekeegan@gmail.com",
                        to: email,
                        subject: "Registration Successful",
                        text: msg,
        
                    };


                    transporter.sendMail(mailOptions, (error, info) => {

                        if(error) {
                            console.log(error);
                        } else {
                            console.log("Email sent: " + info.response);
                        }
                    });
                })
            }
        .catch((err) =>{
            res.send("There's a problem")
            console.log(err);
        })
 
    }
    });
};
 
 pass: "akfgisgeaqkcpgfg" // App password from gmail account
 
const {
            firstName,
            lastName,
            email,
            phoneNumber,
            whatsappNumber,
            password,
            confirmPassword,
            street,
            city,
            state,
            country,
            confirmPhone,
            notifications, 
            language,
            currency,
        } = req.body;

 
image: req.files.image ? {
                    data: req.files.image[0].buffer,
                    contentType: req.files.image[0].mimetype,
                } : null,
 
if (
            !firstName ||
            !lastName ||
            !email ||
            !phoneNumber ||
            !whatsappNumber ||
            !password ||
            !confirmPassword ||
            !address ||
            !street ||
            !city ||
            !state ||
            !country
        ) {
            errors.push({ msg: "Please fill in all the required fields" });
        }
 
 // Validate password
 
 // Validate password
 
 // Validate password
 
 // Validate password
 
 // Validate input
 
  // Check if customer exists
 
artisan: req.artisan
 

// router.post("/upload",  uploadCV);
 
registerArtisan, loginArtisan
 
/ Generate JWT token
 
  // Return response
 
// Save customer to the database
 
// Default to USD
 
// Default to English
 
 // Create new Customer object
 
 // Hash the password
 
   // Check if the email is already registered
 
 // Validate phone number
 
   // Validate passwor
 
// Validate required fields
 
// Preference fields
 
const registerCustomer = async (req, cb) => {
    console.log("Request Body Before Upload:", req.body);
    upload(req, res, async (err) => {
        if (err) {
            console.error("Multer Error:", err.message);
            return res.status(400).json({ msg: err.message });
        }

 


        console.log("Request Body:", req.body);
        console.log("Uploaded Files:", req.files); 

        const { 
            firstName, 
            lastName, 
            email, 
            phoneNumber, 
            whatsappNumber, 
            password, 
            address,
            street, 
            city, 
            state, 
            country ,
            confirmPassword,
            confirmPhone
          } = req.body;

          let errors = [];
    
 
      if(
            !firstName ||!lastName ||!email ||!phoneNumber ||!whatsappNumber ||!password ||!address ||!street ||!city ||!state ||!country
          ){
            errors.push({msg: "Please fill in all the Fields"});
          }

          if (password !== confirmPassword) {
            errors.push({ msg: "Passwords do not match" });
        }

        if (password.length < 8) {
            errors.push({ msg: "Password should be at least 8 characters" });
        }

        if (phoneNumber !== confirmPhone) {
            errors.push({ msg: "Phone number does not match" });
        }

        if (errors.length > 0) {
            return res.status(400).json({ errors });
        }

   
};
 
     try{
            const existingCustomer = await Customer .findOne({ email });
            if(existingCustomer){
                return res.status(400).json({ msg: "Email already registered" });
            }

            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);
            const newCustomer = new Customer({
                firstName,
                lastName,
                email,
                phoneNumber,
                whatsappNumber,
                password: hashedPassword,
                image: req.files.image ? {
                    data: req.files.image[0].buffer,
                    contentType: req.files.image[0].mimetype,
                } : null,
                address: {
                    street,
                    city,
                    state,
                    country,

 
                },
            });

            
            await newCustomer.save();
            res.status(201).json({ msg: "Registration successful" });
        } catch (err) {
            console.error("Server Error:", err.message);
            res.status(500).json({ msg: "Server error" });
        }
    });
 
const loginCustomer = async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ msg: "Please fill in all the fields" });
    }

    try {
        const customer = await Customer.findOne({ email });
        if (!customer) {
            return res.status(400).json({ msg: "Invalid email" });
        }

        const isMatch = await bcrypt.compare(password, customer.password);
        if (!isMatch) {
            return res.status(400).json({ msg: "Invalid password" });
        }

        const token = jwt.sign(
            { id: customer._id },
            process.env.JWT_SECRET,
            { expiresIn: "1d" }
        );

        res.status(200).json({
            msg: "Login successful",
            token,
            artisan: {
                id: customer._id,
                email: customer.email,
                image: customer.image,
                jobCategories: customer.jobCategories 
            },
        });
    } catch (err) {
        console.error(err.message);
        res.status(500).json({ msg: "Server error" });
    }
};

module.exports = {
    registerArtisan,
    loginArtisan,
};
 
// Save customer to the database
 
const newCustomer = new Customer({
                firstName, lastName, email,  whatsappNumber, password: hashedPassword,
                phoneNumber,  city, state, country, dob, jobType, 
                skills, yearsOfExperience, artisanDescription,
                education: {
                    level: education.level,
                    details: education.details,
                },
                workExperience: {
                    hasExperience: workExperience.hasExperience,
                    details: workExperience.details,
                },
                image: req.files.image ? req.files.image[0].filename : null,
            });

            await newArtisan.save();
            res.status(201).json({ msg: "Registration successful" });
        } catch (err) {
            console.error(err.message);
            res.status(500).json({ msg: "Server error" });
        }
    });
};
 
jobCategories: parsedJobCategories,
 
cv: req.files.cv ? req.files.cv[0].filename : null,
 
  cv: req.files.cv ? req.files.cv[0].filename : null,
 
const{firstName, lastName ,email, phoneNumber, whatsappNumber, password,image, address, Job} = req.body;
 
require("dotenv").config();
const path = require("path");
const multer = require("multer");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Artisan = require("../models/customer");


const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, "../uploads"));
    },
    filename: (req, file, cb) => {
        cb(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
    },
});

const upload = multer({
    storage: storage,
    limits: { fileSize: 1024 * 1024 * 5 }, 
    fileFilter: (req, file, cb) => {
        const fileTypes = /jpeg|jpg|png/;
        const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
        const mimeType = fileTypes.test(file.mimetype);

        if (extname && mimeType) {
            cb(null, true);
        } else {
            cb(new Error("Invalid image type, Only .png, .jpeg, .jpg"));
        }
    },
}).fields([
    { name: "image", maxCount: 1 },
]);

const registerCustomer = async (req, cb) => {
    console.log("Request Body Before Upload:", req.body);
    upload(req, res, async (err) => {
        if (err) {
            console.error("Multer Error:", err.message);
            return res.status(400).json({ msg: err.message });
        }


        console.log("Request Body:", req.body);
        console.log("Uploaded Files:", req.files); 

        const{firstName, lastName ,email, phoneNumber, whatsappNumber, password,image, address, Job} = req.body;
}
 
 console.log("Request ")
 
{ name: "cv", maxCount: 1 },
 
 createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
 
dob: {
    type: Date,
  },
 
// Ensures no duplicate customer emails
 
const mongoose = require("mongoose");

const customerSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  phone: {
    type: String,
    required: true,
  },
  profileImage: {
    type: String,
  },

  jobCategory: {
    type: String,
    required: true, 
  },
  preferredDate: {
    type: Date,
  },
  budget: {
    type: Number,
  },
  jobRequests: [
    {
      artisanId: { type: mongoose.Schema.Types.ObjectId, ref: "Artisan" },
      jobDescription: { type: String },
      status: { type: String, default: "pending" }, // "pending", "completed", "cancelled"
      hiredAt: { type: Date },
      completedAt: { type: Date },
    },
  ],
  reviews: [
    {
      artisanId: { type: mongoose.Schema.Types.ObjectId, ref: "Artisan" },
      rating: { type: Number, min: 1, max: 5 },
      comment: { type: String },
      createdAt: { type: Date, default: Date.now },
    },
  ],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Customer", customerSchema);
 
// e.g., "plumbing", "electrician"
 
 bio: {
    type: String,
  },
 
 // Emails should be unique
 
const mongoose = require("mongoose");

const customerSchema = new mongoose.Schema({

name:{
    type: String,
    required: true,
},

email:{
    type: String,
    required: true,
},

password:{
    type: String,
    required: true,
},




})
 
obCategory: artisan.jobCategory,
 
obCategory,
 
// The main job category
 
// Each skill under the category
 
 jobCategories: {
        type: String,
        required: true,
    },
    skills: [
        {
            jobCategory: { type: String, required: true }, 
            skill: { type: String, required: true },   
        },
    ],
 
// Load Data from CSV files
 
// Route to get all countries
 
// Route to get states for a specific country
 
// Route to get cities for a specific state
 
const express = require('express');
const router = express.Router();
const dataController = require('../controller/dataController');

router.get('/countries', dataController.getCountries);
router.get('/country/states', dataController.getStates);
router.get('/states/cities', dataController.getCities);

module.exports = router;

 
// Load Data from CSV files
 
// Get Countries
 
/ Get States
 
// Get Cities
 
const csv = require('csv-parser');
const fs = require('fs');
const path = require('path');

const countries = [];
const states = [];
const cities = [];

exports.loadData = (callback) => {
    if (typeof callback !== 'function') {
        throw new Error('Callback must be a function');
    }

    let count = 0;
    const totalCount = 3;

    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => countries.push(row))
        .on('end', () => {
            count++;
            console.log(`Loaded ${countries.length} countries`);
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => states.push(row))
        .on('end', () => {
            count++;
            console.log(`Loaded ${states.length} states`);
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => cities.push(row))
        .on('end', () => {
            count++;
            console.log(`Loaded ${cities.length} cities`);
            if (count === totalCount) {
                callback();
            }
        });
};

exports.getCountries = (req, res) => {
    res.json(countries);
};

exports.getStates = (req, res) => {
    const countryCode = req.query.countryCode;
    const filteredStates = states.filter(state => state.country_code === countryCode);
    res.json(filteredStates);
};

exports.getCities = (req, res) => {
    const stateCode = req.query.stateCode;
    const filteredCities = cities.filter(city => city.state_code === stateCode);
    res.json(filteredCities);
};

 
;
 
// Debugging req.body
 
// Login artisan
 
// Register artisan
 
// File upload configuration
 
require("dotenv").config();
const path = require("path");
const multer = require("multer");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Artisan = require("../models/artisan");
const { error } = require("console");

const storage = multer.diskStorage({
    destination:(req,file,cb)=>{
        cb(null,path.join(__dirname, "../uploads"));        
    },
    filename:(req,file,cb)=>{
        cb(null,`${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`); 
    },
    });

    const cvStorage = multer.diskStorage({
        destination: (req, file, cb) => {
            cb(null, path.join(__dirname, "../uploads/cvs/")); 
        },
        filename: (req, file, cb) => {
            cb(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
        },
    });
    
   
    const uploadCV = multer({
        storage: cvStorage,
        limits: { fileSize: 1024 * 1024 * 5 }, 
        fileFilter: (req, file, cb) => {
            const fileTypes = /pdf|doc|docx/; 
            const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
            const mimeType = fileTypes.test(file.mimetype);
    
            if (extname && mimeType) {
                cb(null, true);
            } else {
                cb(new Error("Only .pdf, .doc, and .docx files are allowed for CVs"));
            }
        },
    }).single("cv"); 

    const upload = multer({ 
        storage: storage,
        limits: { fileSize: 1024 * 1024 * 5 }, 
        fileFilter: (req, file, cb) => {
            const fileTypes = /jpeg|jpg|png/;
            const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
            const mimeType = fileTypes.test(file.mimetype);
    
            if (extname && mimeType) {
                cb(null, true);
            } else {
                cb(new Error("Only .jpg, .jpeg, and .png files are allowed"));
            }
        },
    }).single("images"); 

    const registerArtisan = async(req,res) =>{
        upload(req,res,async(err)=>{
            if(err){
                return res.status(400).json({msg: err.message});
            }

            const{
                firstName,
                lastName,
                email,gender, whatsappNumber,
                password,
                phoneNumber,
                streetAddress,
                city, state, country,
                 dob,
              jobType, jobCategory, skills, yearsOfExperience,artisanDescription,education, workExperience ,confirmPassword,confirmPhone
            } = req.body;

            let errors = [];

            if( 
                !firstName || !lastName || !email || !gender || !whatsappNumber || !password || !phoneNumber || !streetAddress || !city || !state || !country || !dob ||
                !jobType || jobCategory || !skills || !yearsOfExperience || !artisanDescription || !education || !workExperience || !confirmPassword || !confirmPhone
            ){
                errors.push({msg:"please fill in all the fields"});
            }

            if(password !==confirmPassword){
                errors.push({msg: "Passwords do not Match"});
            }

            if (password.length < 8) {
                errors.push({msg: "Password should be at least 8 characters"});
        }

        if(phoneNumber !==confirmPhone){
            errors.push({msg:"Phone number does not match"});
        }

        if(errors.length > 0){
            return res.status(400).json({errors});
        }

        try{
            const existingArtisan = await Artisan.findOne({email:email});
            if(existingArtisan){
                return res.status(400).json({msg:"Email already Registered"})
            }
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password,salt);

            const newArtisan = new Artisan({
                firstName,
                lastName,
                email,
                gender,
                whatsappNumber,
                password: hashedPassword,
                phoneNumber,
                streetAddress,
                city,
                state,
                country,
                dob,
                jobType,
                jobCategory,
                skills,
                yearsOfExperience,
                artisanDescription,
                image,
                cv,
                education: {
                    level: education.level,
                    details: education.details,
                },
                workExperience: {
                    hasExperience: workExperience.hasExperience,
                    details: workExperience.details,
                },
                image :req.file ? req.file.filename : null,
                cv : req.file ? req.file.filename : null
            })

            await newArtisan.save ();
            res.status(201).json({msg:"Email Registered Successfully"})
        } catch (err){
            console.error(err.message);
            res.status(500).json({msg:"Server Error"});
        }
    });
};

const loginArtisan = async (req, res) => {
    const{email, password} = req.body;

    if(!email || !password){
        res.status(400).json({msg:"Please fill in all the fields"});
    }

    try{
        const artisan = await Artisan.findOne({email:email});
        if(!Artisan){
            res.status(400).json({msg:"Invalid Email"})
        }

        const isMatch = await bcrypt.compare(password, employer.password);
        if (!isMatch) {
            return res.status(400).json({ msg: "Invalid  password" });
        }

        const token = jwt.sign(
            { id: artisan._id },
            process.env.JWT_SECRET,
            { expiresIn: "1d" }
        );

        res.status(200).json({
            msg:"Login Successful",
            token,
            artisan:{
                id: artisan._id,
                email : artisan.email,
                image : artisan.image,
                jobCategory : artisan.jobCategory,
            }
        });
    }catch(err){
        console.error(err.message);
        res.status(500).json({msg:"Server Error"});
    }
};

module.exports={
    uploadCV, registerArtisan, loginArtisan
}


 
education, workExperience ,
 
onst newArtisan = new Artisan = ({
                firstName,lastName,gender, email, whatsappNumber,
                password,
                phoneNumber,
                streetAddress,
                city, state, country,
                 dob,
              jobType, jobCategory, skills, yearsOfExperience,artisanDescription,education, workExperience,
 
authMiddleware,
 
authMiddleware
 
/employerController
 
registerEmployer, loginEmployer
 
require("");
 
 email: artisan.email
 
email or
 
onfirmPassword,confirmPh
 
  experience,
                skills,
                jobTitle,
                jobDescription,
                jobLocation,
 
// Single file upload with the key name "cv"
 
// Limit file size to 5 MB
 
// Allowed file types
 
 // Multer configuration for CVs
 
// CVs are saved in a subfolder named "cvs"
 
const express = require('express');
const router = express.Router();
const dataController = require('../controller/dataController');


router.get('/dropdown', dataController.getData);


router.get('/', (req, res) => {
    res.redirect('/dropdown');
});

module.exports = router;
 
const csv = require('csv-parser');
const fs = require('fs');
const path = require('path');

const countries = [];
const states = [];
const cities = [];

exports.loadData = (callback) => {
    if (typeof callback !== 'function') {
        throw new Error('Callback must be a function');
    }

    let count = 0;
    const totalCount = 3;

    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => countries.push(row))
        .on('end', () => {
            count++;
            console.log(`Loaded ${countries.length} countries`);
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => states.push(row))
        .on('end', () => {
            count++;
            console.log(`Loaded ${states.length} states`);
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => cities.push(row))
        .on('end', () => {
            count++;
            console.log(`Loaded ${cities.length} cities`);
            if (count === totalCount) {
                callback();
            }
        });
};

exports.getData = (req, res) => {
    console.log('Rendering dropdown with:', { 
        countriesCount: countries.length, 
        statesCount: states.length, 
        citiesCount: cities.length 
    });
    res.render('dropdown', { countries, states , cities});
};



exports.getCities = (req, res) => {
    const stateCode = req.query.stateCode;
    const filteredCities = cities.filter(city => city.state_code === stateCode);
    res.json(filteredCities);
};
 
// Upload folder
 
// Use backticks
 
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, "../uploads/")); 
    },
    filename: (req, file, cb) => {
        cb(null, ${file.fieldname}-${Date.now()}${path.extname(file.originalname)});
    },
});
 

// Middleware for file upload
 
// Multer setup for image upload
 
// Include the employer's image if available
 
        // Check if the employer exists
 
 // Hash the password
 
  // Create a new employer
 
    // Check if the employer already exists
 
        // Return validation errors
 
      // Validate password length
 
     // Validate password confirmation
 
  // Validate required fields
 
// Employer Registration
 
// "image" is the field name for the file
 
// Limit file size to 5MB
 
// Upload folder
 
// Save the uploaded file name
 
  // Save the employer to the database
 
// Employer Login
 
 Validate input
 
// Compare passwords
 
// Generate JWT
 
controller/employerController
 

8beafd0da72cfb836305070a19c288e6472df20454fa97d3a6d159baf97e416a75edd981aa94ddeb60165ab69fb01eb43881d935823e575c27c0220bf1d253d8

 
// Import Routes
 
 // Employer Routes

 
// Import Controllers and Middleware (if needed globally)
 
// Load initial data (if needed)
 
 // Configure EJS as the view engine
 
 // Set the static files directory
 
 // Parse URL-encoded data and JSON
 
 // Enable CORS (optional, depending on your frontend setup)
 
 // MongoDB Connection
 
// Configure Express-Sessio
 
// Flash messages middleware
 
// Set global variables for flash messages
 
// Routes
 
// Existing Data Routes
 
// Employer Routes
 
 // Error Handling Middleware
 
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const ejs = require("ejs");
const session = require("express-session");
const flash = require("connect-flash");
const dataRoutes = require('./route/dataRoutes'); 
const dataController = require('./controller/dataController'); 
const path = require('path');
const app = express();

dataController.loadData(() => {


app.set("view engine", "ejs");
app.use(express.static("public"));
app.use(express.urlencoded({ extended: true }));

mongoose.connect("mongodb://127.0.0.1:27017/Final year Project");

app.use(session({
    secret: "mysecretkey",
    resave: true,
    saveUninitialized: true,
}));

app.use(flash());

app.use((req, res, next) => {
    res.locals.message = req.flash("message");
    res.locals.error_msg = req.flash("error_msg");
    next();
});


app.use('/', dataRoutes);


app.listen(3500, () => console.log("Server started at port 3500"));
});
 
// Decoded employer data
 
// Example Protected Route
 
// Employer Login
 
// Employer Registration
 
/ Attach employer information to the request object
 
// Move to the next middleware or route handler
 
require("dotenv").config();
const path = require("path");
const multer = require("multer");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Employer = require("../models/employer");


const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, "../uploads/")); 
    },
    filename: (req, file, cb) => {
        cb(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
    },
});


const upload = multer({ 
    storage: storage,
    limits: { fileSize: 1024 * 1024 * 5 }, 
    fileFilter: (req, file, cb) => {
        const fileTypes = /jpeg|jpg|png/;
        const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
        const mimeType = fileTypes.test(file.mimetype);

        if (extname && mimeType) {
            cb(null, true);
        } else {
            cb(new Error("Only .jpg, .jpeg, and .png files are allowed"));
        }
    },
}).single("images"); 


const registerEmployer = async (req, res) => {
    upload(req, res, async (err) => {
        if (err) {
            return res.status(400).json({ msg: err.message });
        }

        const {
            email,
            password,
            companyName,
            termsAndConditions,
            companyNum,
            country,
            state,
            city,
            confirmPassword,
        } = req.body;

        let errors = [];

       
        if (
            !email ||
            !password ||
            !companyName ||
            !termsAndConditions ||
            !companyNum ||
            !country ||
            !state ||
            !city ||
            !confirmPassword
        ) {
            errors.push({ msg: "Please fill in all fields" });
        }

       
        if (password !== confirmPassword) {
            errors.push({ msg: "Passwords do not match" });
        }

       
        if (password.length < 8) {
            errors.push({ msg: "Password should be at least 8 characters" });
        }

        
        if (errors.length > 0) {
            return res.status(400).json({ errors });
        }

        try {
            
            const existingEmployer = await Employer.findOne({ email });
            if (existingEmployer) {
                return res.status(400).json({ msg: "Email already registered" });
            }

            
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);

           
            const newEmployer = new Employer({
                email,
                password: hashedPassword,
                CompanyName: companyName,
                termsAndConditions,
                companyNum,
                country,
                state,
                city,
                image: req.file ? req.file.filename : null, 
            });

            
            await newEmployer.save();
            res.status(201).json({ msg: "Employer registered successfully" });
        } catch (err) {
            console.error(err.message);
            res.status(500).json({ msg: "Server error" });
        }
    });
};


const loginEmployer = async (req, res) => {
    const { email, password } = req.body;

   
    if (!email || !password) {
        return res.status(400).json({ msg: "Please fill in all fields" });
    }

    try {
       
        const employer = await Employer.findOne({ email });
        if (!employer) {
            return res.status(400).json({ msg: "Invalid email or password" });
        }

       
        const isMatch = await bcrypt.compare(password, employer.password);
        if (!isMatch) {
            return res.status(400).json({ msg: "Invalid email or password" });
        }

        
        const token = jwt.sign(
            { id: employer._id },
            process.env.JWT_SECRET,
            { expiresIn: "1d" }
        );

        res.status(200).json({
            msg: "Login successful",
            token,
            employer: {
                id: employer._id,
                email: employer.email,
                companyName: employer.CompanyName,
                image: employer.image, 
            },
        });
    } catch (err) {
        console.error(err.message);
        res.status(500).json({ msg: "Server error" });
    }
};

module.exports = {
    registerEmployer,
    loginEmployer,
};

 
d+BrDl97IXpu3HkP4TkTPcs8+/5/7WRoRhZPkMaHolA=
 
// Multer setup for image upload
 
// Upload folder
 
// Middleware for file upload
 
// Limit file size to 5MB
 
/ "image" is the field name for the file
 
gistration
 
 // Validate required fields
 
 // Validate password confirmation
 
 // Validate password length
 
// Return validation errors
 
heck if the employer already exists
 
// Hash the password
 
 // Create a new employer
 
/ Save the uploaded file name
 
// Save the employer to the database
 
// Employer Login
 
 // Validate input
 
 // Check if the employer exists
 
 // Compare passwords
 
/ Generate JWT
 
the employer's image if available
 
require("dotenv").config();
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Employer = require("../models/employer");

let storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, 'uploads'))
    },
    filename: (req, file, cb) => {
        cb(null, file.fieldname + '-' + Date.now())
    }
});


let upload = multer({storage:stora

let st = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './public/images/')
    },
    filename: (req, file, cb) => {
        cb(null, file.fieldname + '-' + Date.now())
    }
});

let upl = multer({storage:st});

const EmployerRegistrationPost = async(req,res)=>{
    const{email, password,companyName, termsAndConditions,companyNum, image, country, state, city , confirmPassword}= req.body;

    let errors = [];
    if(!email || !password || !companyName || !termsAndConditions || !companyNum
        || !country || !state || !city || !confirmPassword){
            errors.push({ msg: "Please fill in all fields" });
        }

        if (password !== confirmPassword) {
            errors.push({ msg: "Passwords do not match" });
          }
        
          if (password.length < 8) {
            errors.push({ msg: "Password should be at least 8 characters" });
          }
        
          if (errors.length > 0) {
            return res.status(400).json({ errors, companyName, email});
          }

          try{

          }

}

 
mongodb://localhost:27017/UserAPI
 
our_mongodb_connection_strin
 
//IMAGE UPLOAD FOR Skills
 
 // Use path.join to ensure the correct path separator is used
 
mongoose.model("", {})
 
 picture: {
        type: Buffer,  
        required: false,
    },
 
  // Basic Details
 
// Restrict to Male and Female
 
// Store thedata picture as binary
 
/ Job Details
 
// Restrict to Contract and Full-Time
 
// Store category as a string
 
/ Store individual skill as a string
 
// Store uploaded CV
 
 // Education Details
 
 // Work Experience
 
const mongoose = require("mongoose");

const artisanSchema = new mongoose.Schema({

    firstName:{
        type:String,
        required:true
    },

    lastName:{
        type:String,
        required:true
    },

    email:{
        type:String,
        required:true,
    },

    streetAddress:


 
 termsAndConditions: {
        type: By using [Your Artisan Page Name], you agree to the following terms: Our platform connects clients with artisans based on location and specified needs. We are not responsible for the quality of work, fulfillment of services, or any agreements made between clients and artisans. Users must provide accurate information when creating profiles or listings. We do not guarantee matches or availability of artisans in specific areas. Personal data provided will be used solely for matching purposes and will not be shared with third parties without consent. We reserve the right to remove any user or listing that violates our guidelines or terms. Use of our platform is at your own risk, and we are not liable for any disputes, damages, or losses arising from connections made through our service. Terms are subject to change without prior notice. For questions or support, contact us at [Your Contact Information].
        required: true,
    },
 
String, // Store the full text of terms and conditions
 
    password:{
        type:String,
        required:true,
    },
 
  <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option
    </select>
 
 <!-- City Dropdown -->
 
   <!-- State Dropdown -->
 
    <!-- Country Dropdown -->
 
TransactionSchema.pre('save', function(next) {
    let totalAmount = 0;
    this.items.forEach(item => {
        totalAmount += item.price * item.quantity;
    });
    this.totalAmount = totalAmount;  
    next();
});
 



  

 
const filterByUnit(req, res, next) {
    const { unitLocation } = req.params;
    if (!unitLocation) {
        return res.status(400).json({ error: 'Unit location is required' });
    }
    req.unitLocation = unitLocation;
    next();
}

module.exports = {filterByUnit};

 
function 
 
tcontroller
 
entral
 
entral
 




 















 
module.exports = {  };
 
// Assuming the user is authenticated via middleware
 
// Validate feedback data
 
const Feedback = require('../models/Feedback');

// Controller for submitting feedback for a business unit
 
// Populating user details if needed
 
// Controller to fetch feedback for a specific business unit
 
const { isCustomer } = require('../middleware/isCustomer');
 
re('../middleware/authenticateUser');
 
{ isAdmin } = require('../middleware/isAdmin');  
 
// Feedback Routes
 
// Centralized Data Routes (Admin-only access)
 
// Importing isAdmin middleware
 
// Importing isCustomer middleware
 
// Submit feedback (restricted to customers)
 
// Get feedback by unit location
 
// Fetch all inventory data
 
// Fetch all transactions
 
// Aggregate total sales
 
// Aggregate inventory data
 
const Transaction = mongoose.model('Transaction', TransactionSchema);

module.exports = Transaction;
 
const Feedback = mongoose.model('Feedback', FeedbackSchema);

module.exports = Feedback;

 
// Controller to aggregate inventory data across all units
 
// Controller to aggregate total sales across all units
 
// Controller to fetch all transactions across units
 
// Controller to fetch all inventory data across all units
 
const Inventory = require('../models/inventory');
 
const Transaction = require('../models/transaction);
 
// Assuming you're referring to the user model
 
const express = require('express');
const { recordTransaction, getTransactionsByLocation, getAllTransactions } = require('../controller/tcontroller');
const { authenticateUser } = require('../middleware/authenticateUser');
const { filterByUnit } = require('../middleware/filterByUnit'); // Assuming filterByUnit is just a simple middleware, no need to destructure

const router = express.Router();

// Route to record a new transaction
router.post('/transaction', authenticateUser, recordTransaction);

// Route to get transactions by unitLocation
router.get('/transactions/:unitLocation', authenticateUser, filterByUnit, getTransactionsByLocation);

// Route to get all transactions (admin view)
router.get('/transactions', authenticateUser, getAllTransactions);

module.exports = router;

 
const express = require('express');
const { recordTransaction, getTransactionsByLocation, getAllTransactions } = require('../controller/tcontroller');
const { authenticateUser } = require('../middleware/authenticateUser');
const {filterByUnit} =require('../middleware/filterByUnit');

const router = express.Router();


router.post('/transaction', authenticateUser, recordTransaction);


router.get('/transactions/:unitLocation', authenticateUser, filterByUnit, getTransactionsByLocation);


router.get('/transactions', authenticateUser, getAllTransactions);

module.exports = router;

 
filterByUnit
 
const {filterByUnit} = require('../middleware/filterByUnit);
 
function filterByUnit(req, res, next) {
    const { unitLocation } = req.params;
    if (!unitLocation) {
        return res.status(400).json({ error: 'Unit location is required' });
    }
    req.unitLocation = unitLocation;
    next();
}
 
// Route to fetch all transactions (admin view)
 
// Route to fetch transactions by unit location
 
// Route to record a new transaction
 
// Set the totalAmount field
 
// Respond with the list of all transactions
 
// Controller function to fetch all transactions
 
// Fetch all transactions
 
 tion
 
// Respond with the transactions for the unit loca
 
 cation
 
// Fetch transactions for the specified unit lo
 

siness unit location
 
// Controller function to fetch transactions by bu
 
 // Respond with success
 
 // Save the transaction
 
// Create a new transaction
 
// Controller function to record a new transaction
 
const authenticateUser = require('../middleware/authenticateUser');
 
// Middleware to ensure the user is a customer
 
// If the user is a customer, continue to the next middleware or route handler
 

     ceipt data)
 
 // Respond with the populated purchase history (re
 
 // Respond with the populated purchase history (re
 
      // Check if the user has any purchase history
 
      // Fetch the user's dah transactions)
 
ta, including their populated purchase history (wit
 
 // Ensure the user is a customer
 
// Changed 'User' to 'user' to match your model name
 
// This can be dynamically calculated in the controller
 
// Ensures '
 
unitLocation' is used with the correct constraints
 
// Adds createdAt and updatedAt timestamps
 
const mongoose = require('mongoose');

const TransactionSchema = new mongoose.Schema({
    businessUnit: String,
    adminId: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User', // Reference to the User model (which includes the Admin role)
        required: true 
    },
    items: [
        {
            itemName: String,
            quantity: Number,
            price: Number
        }
    ],
    totalAmount: Number,  // This can be dynamically calculated in the controller
    paymentMethod: {
        type: String,
        enum: ["Cash", "Credit Card", "Mobile Payment", "Bank Transfer"],
        default: "Cash"
    },
    transactionDate: { type: Date, default: Date.now },
    status: {
        type: String,
        enum: ["Completed", "Pending", "Refunded"],
        default: "Completed"
    },
    unitLocation: { // Changed from location to unitLocation with required constraint
        type: String,
        required: true
    }
}, { timestamps: true }); // Adds createdAt and updatedAt timestamps

const Transaction = mongoose.model('Transaction', TransactionSchema);

module.exports = Transaction;

 
const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
    transactionId: String,
    businessUnit: String,
    adminId: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'user', 
        required: true 
    },
    items: [
        {
            itemName: String,
            quantity: Number,
            price: Number
        }
    ],
    totalAmount: Number,  
    paymentMethod: {
        type: String,
        enum: ["Cash", "Credit Card", "Mobile Payment", "Bank Transfer"],
        default: "Cash"
    },
    transactionDate: { type: Date, default: Date.now },
    status: {
        type: String,
        enum: ["Completed", "Pending", "Refunded"],
        default: "Completed"
    },
    location: String
});

const Transaction = mongoose.model('Transaction', TransactionSchema);

module.exports = Transaction;

 
the controller
 
// This can be dynamically calculated in 
 
e to the User model (which includes the Admin role)
 
oded.username, _id: decoded.userId };
 
|| { role: decoded.role, username: de
 
req.user = user; 
 
authenticateUser,
 
// The authenticated user data
 
/ Verify the token
 
// Fetch the user from DB
 
// Attach user to the request
 
// Create JWT token
 
// Token expires in 1 hour
 
// Create JWT token
 
// Token expires in 1 hour
 



require("dotenv").config();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/user");
 

const userRegistrationPost = async (req, res) => {
  const { username, email, password, role, confirmPassword } = req.body;


  let errors = [];

  
  if (!username || !email || !password || !role || !confirmPassword) {
    errors.push({ msg: "Please fill in all fields" });
  }

  if (password !== confirmPassword) {
    errors.push({ msg: "Passwords do not match" });
  }

  if (password.length < 8) {
    errors.push({ msg: "Password should be at least 8 characters" });
  }

  if (errors.length > 0) {
    return res.status(400).json({ errors, username, email, role });
  }

  try {
    
    const existingUser = await User.findOne({ email: email });
    if (existingUser) {
      errors.push({ msg: "Email already exists" });
      return res.status(400).json({ errors, username, email, role });
    }

    
    const hashedPassword = await bcrypt.hash(password, 10);

    
    const newUser = new User({
      username,
      email,
      role,
      password: hashedPassword,
    });

    
    await newUser.save();

     return res.status(404).json({ message: "This email does not exist" });
    }

    const isVerified = await bcrypt.compare(password, user.password);
    if (!isVerified) {
      return res.status(401).json({ message: "Invalid Password" });
    }

    req.session.user_id = user._id;
    req.session.email = user.email;
    req.session.username = user.username;
 

    res.status(201).json({ msg: "Registration successful. You can now log in." });
  } catch (error) {
  
    console.error("Error during registration:", error);
    res.status(500).json({ msg: "Server error. Please try again later." });
  }
};

const userLoginPost = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
    
 
  res.status(200).json({
      message: "Login successful",
      user: {
        id: user._id,
        email: user.email,
        username: user.username,
      },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "There was a problem selecting from DB" });
  }
};
 
JWT_SECRET=your-secret-key
 
our-database-name
 
// middleware/authMiddleware.js

 
 // Check if user role is 'Admin'
 
   purchaseHistory: {
            transactionId: { type: mongoose.Schema.Types.ObjectId, ref: 'Transaction' },
            amountSpent: Number,
            date: Date
        
}
 
 to Transaction model
 
});
 
required:true
 
// Function for fetching categories by business uni
 
// Correct query parameter: businessUnit
 
// Correct query parameter: businessUnit
 
    // Find the item by itemName and delete it
 
// Get item name from the route parameter
 
// Find by itemName
 
// Updates to apply
 
// Return the updated document
 
    // Find the item by itemName and update it
 
// Get item name from the route parameter
 
// Get update data from the request body
 
const updateInventoryItem = async (req, res) => {
    const { itemName } = req.params;
    const updates = req.body;

    try {
        const updatedItem = await Inventory.findByIdAndUpdate(itemName, updates, { new: true });
        if (!updatedItem) {
            return res.status(404).json({ message: 'Inventory item not found' });
        }
        res.status(200).json({ message: 'Inventory item updated successfully', data: updatedItem });
    } catch (error) {
        res.status(500).json({ error: 'Failed to update inventory item', details: error.message });
    }
};

const deleteInventoryItem = async (req, res) => {
    const { itemName } = req.params;

    try {
        const deletedItem = await Inventory.findByIdAndDelete(itemName);
        if (!deletedItem) {
            return res.status(404).json({ message: 'Inventory item not found' });
        }
        res.status(200).json({ message: 'Inventory item deleted successfully' });
    } catch (error) {
        res.status(500).json({ error: 'Failed to delete inventory item', details: error.message });
    }
};
 
controller
 
icontroller.
 
icontroller.
 
icontroller.
 
ventoryController
 
inventoryController
 
const Inventory = require("../models/inventory");


exports.createInventoryItem = async (req, res) => {
    const { itemName, category, quantity, reorderLevel, supplierInfo, unitLocation, expirationDate } = req.body;

    try {
        const newItem = new Inventory({
            itemName,
            category,
            quantity,
            reorderLevel,
            supplierInfo,
            unitLocation,
            expirationDate,
        });

        await newItem.save();
        res.status(201).json({ message: 'Inventory item created successfully', data: newItem });
    } catch (error) {
        res.status(500).json({ error: 'Failed to create inventory item', details: error.message });
    }
};


exports.getInventoryByUnit = async (req, res) => {
    const { unitLocation } = req.params;

    try {
        const items = await Inventory.find({ unitLocation });
        if (items.length === 0) {
            return res.status(404).json({ message: `No inventory found for unit: ${unitLocation}` });
        }
        res.status(200).json(items);
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch inventory', details: error.message });
    }
};


exports.updateInventoryItem = async (req, res) => {
    const { id } = req.params;
    const updates = req.body;

    try {
        const updatedItem = await Inventory.findByIdAndUpdate(id, updates, { new: true });
        if (!updatedItem) {
            return res.status(404).json({ message: 'Inventory item not found' });
        }
        res.status(200).json({ message: 'Inventory item updated successfully', data: updatedItem });
    } catch (error) {
        res.status(500).json({ error: 'Failed to update inventory item', details: error.message });
    }
};


exports.deleteInventoryItem = async (req, res) => {
    const { id } = req.params;

    try {
        const deletedItem = await Inventory.findByIdAndDelete(id);
        if (!deletedItem) {
            return res.status(404).json({ message: 'Inventory item not found' });
        }
        res.status(200).json({ message: 'Inventory item deleted successfully' });
    } catch (error) {
        res.status(500).json({ error: 'Failed to delete inventory item', details: error.message });
    }
};

module.exports = {
    createInventoryItem,
    getInventoryByUnit,
    updateInventoryItem,
    deleteInventoryItem,
  };
  



 
onst inventoryController = require('../controllers/inventoryController');

 
// Routes for inventory operations
 
module.exports = {createInventoryItem,}
 
// DELETE /inventory/:id
 
// PUT /inventory/:id
 
// GET /inventory/:unitLocation
 
// POST /inventory
 
module.exports = { userLoginPost };
 
// Send a successful response
 
 // Set session data if login is successful
 
    // Compare provided password with the stored hashed password
 
// Find the user by email
 

const bcrypt = require('bcryptjs'); // Make sure bcrypt is imported

 
})
}
 
const userLoginPost = async (req,res) => {
  const{email,password}= req.body;

  User.findOne({email:email})
  .then((result) => {
    if (!result) {
      req.flash("error_msg", "This email does not exist");
      res.redirect("/login ");
    }else{
      bcrypt.compare(password,result.password,(err,isVerified)=>{
        if (err) {
          req.flash("error_msg", "Something Appears Wrong");
          res.redirect("/login");
        }

        if(isVerified){
          req.session.user_id = result._id;
          req.session.email = result.email;
          req.session.role = result.role;

          res.redirect("/dashboard")
        }else{
          req.flash("error_msg", "Invalid Password");
          res.redirect("/login");
        }
      })
    }
  })
  .catch((err) => {
    req.flash("error_msg", "There was a problem selecting from DB");
        res.redirect("/login");
 
then((result)=>{

  }
 
router.post("/test", (req, res) => {
    res.send("Test route working!");
  });
 
userRegistration
 
const userRegistration = (req,res)=>{
  res.json("registration")
}
 
router.post("/registration", userRegistration);
 
  // Handle any unexpected errors
 
// Save the user to the database
 
 // Respond with a success message
 
// Create a new user instance
 
// Hash the password
 
// Check if the user already exists
 
// Return errors to the client
 
// Basic validation
 
  // Initialize an array to collect errors
 
// Ensure you have a User model
 
require("dotenv").config();
const mongoose = require("mongoose"),
bcrypt = require ("bcryptjs"),
multer = require("multer"),
fs= require("fs"),
path= require("path"),
 nodemailer = require('nodemailer');
 User = require("../models/user");


 //Admin signing up

 const userRegistrationPost = (req,res)=>{
    const {username,email,password, role,confirmPassword} = req.body;

    let errors =[];

    if(!username  || !email || !password || !role || !confirmPassword){
        errors.push({msg: "Please fill in all fields"});
 }

 if(password  !== confirmPassword){
    errors.push({msg: "Passwords do not match"});
}

if (password.length < 8){
    errors.push({msg: "Password should be a least 8 characters"});
}

if (errors.length  > 0){
    res.json("registration",{ errors, username, email, role,password, confirmPassword});

}else{

    //We do not want to have 2 users with same email

    User.findOne ({email:email})
    .then((result)=>{
        if(result){
            errors.push({msg: "Email already exists"});
            res.json("registration",{errors, username, email, password, role,confirmPassword})
            }else{

                //below we encrypt our password

                bcrypt.hash(password, 10, (error, hash) => {
                    const newUser = new User({username,email,role,password:hash,

                })

                try{
                    newUser.save(),
                    req.flash ('message', "Registration Successful. You can now login");
                    res.red
                }
                })
    })

}




 }

 
})
 
})
 
 createdAt:{
        type: Date,
        required: true,   
        default: Date.now, 
      }
 
Schema({})
 
// Enforces that the field must be explicitly provided, though it's usually unnecessary
 
// Default to current date/time
 
 type:
 
oluwuyi
 
Oluwuyi Olumide
 
OLuwuyi Olumide Ismail
 
pp.use('/', indexRouter);
 
const indexRouter = require('./route/index');
 
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const ejs = require("ejs");
const session = require("express-session");
const flash = require("connect-flash");
const dataRoutes = require('./route/dataRoutes'); 
const dataController = require('./controller/dataController'); 
const path = require('path');
const indexRouter = require('./route/index');
const app = express();

app.set("view engine", "ejs");
app.use(express.static("public"));
app.use(express.urlencoded({extended:true}));

  app.use(express.urlencoded({ extended: true }));

  mongoose.connect("mongodb://127.0.0.1:27017/Final year Project");

  app.use(session({
    secret:"mysecretkey",
    resave:true,
    saveUninitialized:true
}))

app.use(flash());
app.use((req,res,next) => {
    res.locals.message = req.flash("message");
    res.locals.error_msg = req.flash("error_msg");

    next();
})

  app.use('/', dataRoutes);
 

  module.exports = app; 

  app.listen(3000, () => console.log("Server started at port 3000"));

 

body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f9f9f9;
    margin: 0;
}

#kpi-dashboard {
    background: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

svg {
    font-family: 'Arial', sans-serif;
}

.value {
    font-size: 12px;
    font-weight: bold;
}

.axis .domain, .axis .tick line {
    stroke: #ddd;
}
 
// Error handling middleware
  app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
  });
 
 app.use(session({
    secret: "mysecretkey",
    resave: true,
    saveUninitialized: true,
  }));

  app.use(flash());

  app.use((req, res, next) => {
    res.locals.message = req.flash("message");
    res.locals.error_msg = req.flash("error_msg");
    next();
  });
 
});
 
 app.use('/', indexRouter);
 
dataController.loadData(() => {
  app.set("view engine", "ejs");
  
  // Updated static file serving
  app.use(express.static(path.join(__dirname, 'public'), {
    setHeaders: (res, filePath) => {
      if (filePath.endsWith('.css')) {
        res.setHeader('Content-Type', 'text/css');
      }
      if (filePath.endsWith('.js')) {
        res.setHeader('Content-Type', 'application/javascript');
      }
    }
  }));
 
// main.js

// Wait for the DOM to fully load before executing the script
document.addEventListener('DOMContentLoaded', function () {
    // Fetch KPI data from the server
    fetch('/data/kpi-data') // Ensure this matches your route
        .then(response => {
            // Check if the response is OK
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            // Parse the JSON data from the response
            return response.json();
        })
        .then(data => {
            console.log(data); // Log the fetched JSON data to the console
            visualizeKPI(data); // Call a function to visualize the data
        })
        .catch(error => {
            // Handle any errors that occur during the fetch
            console.error('Error fetching data:', error);
        });
});

// Function to visualize KPI data using D3.js
function visualizeKPI(kpiData) {
    // Visualization code (as described previously)
    const width = 600;
    const height = 400;
    const margin = { top: 20, right: 30, bottom: 40, left: 40 };

    const svg = d3.select("#kpi-dashboard")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

    const x = d3.scaleBand()
        .domain(kpiData.map(d => d.name))
        .range([margin.left, width - margin.right])
        .padding(0.1);

    const y = d3.scaleLinear()
        .domain([0, d3.max(kpiData, d => d.value)]).nice()
        .range([height - margin.bottom, margin.top]);

    svg.append("g")
        .selectAll("rect")
        .data(kpiData)
        .enter().append("rect")
        .attr("x", d => x(d.name))
        .attr("y", d => y(d.value))
        .attr("height", d => y(0) - y(d.value))
        .attr("width", x.bandwidth())
        .attr("fill", "steelblue");

    svg.append("g")
        .attr("transform", `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x));

    svg.append("g")
        .attr("transform", `translate(${margin.left},0)`)
        .call(d3.axisLeft(y));
}
 
const express = require('express');
const router = express.Router();


router.get('/kpi-data', (req, res) => {
    const kpiData = [
        { name: 'Artisan Performance', value: 75 },
        { name: 'Service Quality', value: 88 },
        { name: 'Platform Efficiency', value: 92 },
        { name: 'Demand Tracking', value: 80 },
        { name: 'Customer Satisfaction', value: 85 }
    ];
    res.json(kpiData); 
});

module.exports = router;
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KPI Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div id="kpi-dashboard"></div>

    <script src="/js/d3.min.js"></script>
    <script src="/js/main.js"></script>

 
   
</body>
</html>
 
const express = require('express');
const router = express.Router();


router.get('/kpi-data', (req, res) => {
    const kpiData = [
        { name: 'Artisan Performance', value: 75 },
        { name: 'Service Quality', value: 88 },
        { name: 'Platform Efficiency', value: 92 },
        { name: 'Demand Tracking', value: 80 },
        { name: 'Customer Satisfaction', value: 85 }
    ];
    res.json(kpiData); 
});

module.exports = router;
 
document.addEventListener("DOMContentLoaded", () => {
    fetch('/kpi-data')
        .then(response => response.json())
        .then(data => {
            console.log("Data received:", data); // Check data in console

            const svgWidth = 600, svgHeight = 400;
            const barPadding = 10;
            const barWidth = (svgWidth / data.length) - barPadding;

            const svg = d3.select("#kpi-dashboard")
                .append("svg")
                .attr("width", svgWidth)
                .attr("height", svgHeight);

            const yScale = d3.scaleLinear()
                .domain([0, 100])
                .range([svgHeight, 0]);

            const xScale = d3.scaleBand()
                .domain(data.map(d => d.name))
                .range([0, svgWidth])
                .padding(0.1);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, 100]);

            svg.selectAll("rect")
                .data(data)
                .enter()
                .append("rect")
                .attr("x", d => xScale(d.name))
                .attr("y", d => yScale(d.value))
                .attr("width", barWidth)
                .attr("height", d => svgHeight - yScale(d.value))
                .attr("fill", d => colorScale(d.value));

            svg.selectAll("text.value")
                .data(data)
                .enter()
                .append("text")
                .classed("value", true)
                .attr("x", d => xScale(d.name) + barWidth / 2)
                .attr("y", d => yScale(d.value) - 5)
                .attr("text-anchor", "middle")
                .text(d => d.value)
                .attr("fill", "#333");

            svg.append("g")
                .attr("transform", `translate(0,${svgHeight})`)
                .call(d3.axisBottom(xScale));

            svg.append("g")
                .call(d3.axisLeft(yScale));
        })
        .catch(error => console.error("Error fetching data:", error)); // Catch any data fetching errors
});
 
// Sample KPI data route
 
// Ensure this sends JSON data
 
const express = require('express');
const router = express.Router();


const kpiData = [
    { name: 'Artisan Performance', value: 75 },
    { name: 'Service Quality', value: 88 },
    { name: 'Platform Efficiency', value: 92 },
    { name: 'Demand Tracking', value: 80 },
    { name: 'Customer Satisfaction', value: 85 }
];


router.get('/', (req, res) => {
    res.redirect('/kpi-data'); 
});


router.get('/kpi-data', (req, res) => {
    res.render('index', { kpiData });
});

module.exports = router;
 
   <script>
        // Pass the kpiData to the D3 script
        const kpiData = <%= JSON.stringify(kpiData) %>;
    </script>
 
/
 

 
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const ejs = require("ejs");
const session = require("express-session");
const flash = require("connect-flash");
const dataRoutes = require('./route/dataRoutes'); 
const dataController = require('./controller/dataController'); 
const path = require('path');
const indexRouter = require('./route/index');
const app = express();

dataController.loadData(() => {


app.set("view engine", "ejs");
app.use(express.static("public"));
app.use(express.urlencoded({ extended: true }));

mongoose.connect("mongodb://127.0.0.1:27017/Final year Project");

app.use(session({
    secret: "mysecretkey",
    resave: true,
    saveUninitialized: true,
}));

app.use(flash());

app.use((req, res, next) => {
    res.locals.message = req.flash("message");
    res.locals.error_msg = req.flash("error_msg");
    next();
});


app.use('/', dataRoutes);
app.use('/', indexRouter);

app.listen(3000, () => console.log("Server started at port 3000"));
});
 
// Sample KPI data
 
// Redirect to the KPI data route
 
// Route to send KPI data
 
// Redirect to the KPI data route
 
const express = require('express');
const router = express.Router();

// Render index.ejs and pass KPI data to the view
router.get('/', (req, res) => {
    const kpiData = [
        { name: 'Artisan Performance', value: 75 },
        { name: 'Service Quality', value: 88 },
        { name: 'Platform Efficiency', value: 92 },
        { name: 'Demand Tracking', value: 80 },
        { name: 'Customer Satisfaction', value: 85 }
    ];
    res.render('index', { kpiData });
});

module.exports = router;
 
 // Pass the kpiData to the D3 script
 
// routes/index.js
const express = require('express');
const router = express.Router();

// Sample KPI data
router.get('/kpi-data', (req, res) => {
    const kpiData = [
        { name: 'Artisan Performance', value: 75 },
        { name: 'Service Quality', value: 88 },
        { name: 'Platform Efficiency', value: 92 },
        { name: 'Demand Tracking', value: 80 },
        { name: 'Customer Satisfaction', value: 85 }
    ];
    res.json(kpiData);
});

module.exports = router;
 
document.addEventListener("DOMContentLoaded", () => {
    fetch('/kpi-data')
        .then(response => response.json())
        .then(data => {
            console.log("Data received:", data); // Check data in console

            const svgWidth = 600, svgHeight = 400;
            const barPadding = 10;
            const barWidth = (svgWidth / data.length) - barPadding;

            const svg = d3.select("#kpi-dashboard")
                .append("svg")
                .attr("width", svgWidth)
                .attr("height", svgHeight);

            const yScale = d3.scaleLinear()
                .domain([0, 100])
                .range([svgHeight, 0]);

            const xScale = d3.scaleBand()
                .domain(data.map(d => d.name))
                .range([0, svgWidth])
                .padding(0.1);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, 100]);

            svg.selectAll("rect")
                .data(data)
                .enter()
                .append("rect")
                .attr("x", d => xScale(d.name))
                .attr("y", d => yScale(d.value))
                .attr("width", barWidth)
                .attr("height", d => svgHeight - yScale(d.value))
                .attr("fill", d => colorScale(d.value));

            svg.selectAll("text.value")
                .data(data)
                .enter()
                .append("text")
                .classed("value", true)
                .attr("x", d => xScale(d.name) + barWidth / 2)
                .attr("y", d => yScale(d.value) - 5)
                .attr("text-anchor", "middle")
                .text(d => d.value)
                .attr("fill", "#333");

            svg.append("g")
                .attr("transform", `translate(0,${svgHeight})`)
                .call(d3.axisBottom(xScale));

            svg.append("g")
                .call(d3.axisLeft(yScale));
        })
        .catch(error => console.error("Error fetching data:", error)); // Catch any data fetching errors
});
 

document.addEventListener("DOMContentLoaded", () => {
    fetch('/kpi-data')
        .then(response => response.json())
        .then(data => {
            const svgWidth = 600, svgHeight = 400;
            const barPadding = 10;
            const barWidth = (svgWidth / data.length) - barPadding;

            // Create SVG container
            const svg = d3.select("#kpi-dashboard")
                .append("svg")
                .attr("width", svgWidth)
                .attr("height", svgHeight);

            // Set up scales
            const yScale = d3.scaleLinear()
                .domain([0, 100])
                .range([svgHeight, 0]);

            const xScale = d3.scaleBand()
                .domain(data.map(d => d.name))
                .range([0, svgWidth])
                .padding(0.1);

            // Define color scale
            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, 100]);

            // Add bars
            svg.selectAll("rect")
                .data(data)
                .enter()
                .append("rect")
                .attr("x", d => xScale(d.name))
                .attr("y", d => yScale(d.value))
                .attr("width", barWidth)
                .attr("height", d => svgHeight - yScale(d.value))
                .attr("fill", d => colorScale(d.value));

            // Add value labels on top of each bar
            svg.selectAll("text.value")
                .data(data)
                .enter()
                .append("text")
                .classed("value", true)
                .attr("x", d => xScale(d.name) + barWidth / 2)
                .attr("y", d => yScale(d.value) - 5)
                .attr("text-anchor", "middle")
                .text(d => d.value)
                .attr("fill", "#333");

            // Add x-axis
            svg.append("g")
                .attr("transform", `translate(0,${svgHeight})`)
                .call(d3.axisBottom(xScale));

            // Add y-axis
            svg.append("g")
                .call(d3.axisLeft(yScale));
        });
});
 
 <script src="https://d3js.org/d3.v7.min.js"></script>
 
/* public/css/style.css */
 
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
}

#kpi-dashboard {
    margin: 20px;
}

svg text {
    font-size: 12px;
}
 
// public/js/main.js
 
// public/js/main.js
document.addEventListener("DOMContentLoaded", () => {
    fetch('/kpi-data')
        .then(response => response.json())
        .then(data => {
            const svgWidth = 600, svgHeight = 400;
            const barPadding = 5;
            const barWidth = (svgWidth / data.length);

            const svg = d3.select("#kpi-dashboard")
                .append("svg")
                .attr("width", svgWidth)
                .attr("height", svgHeight);

            svg.selectAll("rect")
                .data(data)
                .enter()
                .append("rect")
                .attr("y", d => svgHeight - d.value * 4)
                .attr("height", d => d.value * 4)
                .attr("width", barWidth - barPadding)
                .attr("transform", (d, i) => `translate(${[i * barWidth, 0]})`)
                .attr("fill", "teal");

            svg.selectAll("text")
                .data(data)
                .enter()
                .append("text")
                .text(d => `${d.name}: ${d.value}`)
                .attr("y", d => svgHeight - d.value * 4 - 10)
                .attr("x", (d, i) => i * barWidth + (barWidth - barPadding) / 2)
                .attr("text-anchor", "middle")
                .attr("fill", "#fff");
        });
});
 
    # Coursera's AI-Powered Recommendation Engine: Revolutionizing Virtual Tutoring

#

### 4.
 
# Defense of Topic: AI-Driven Personalization in Online Learning Platforms

### 1. Introduction

In the rapidly evolving landscape of online education, AI-driven personalization has emerged as a game-changing technology. This report defends the thesis that Coursera's AI-powered recommendation engine represents a significant advancement in virtual tutoring, addressing critical challenges in online education such as engagement, relevance, and personalization.

Coursera's recommendation engine leverages advanced machine learning algorithms to analyze vast amounts of data, including user behavior, course content, and learning outcomes. This system forms the backbone of Coursera's ability to deliver personalized learning experiences at scale, making it an exemplar of AI application in education technology.

### 2. Overview of Coursera's Recommendation Engine

Coursera's AI-powered recommendation engine is a sophisticated system that forms the core of its personalization strategy. Key aspects include:

- **Data-Driven Insights**: Analyzes millions of data points from user interactions, course content, and learning outcomes.
- **Real-Time Personalization**: Provides dynamic, up-to-date course and content recommendations.
- **Multi-Faceted Approach**: Considers user goals, behavior, and global trends in generating recommendations.
- **Continuous Learning**: The system evolves and improves its recommendations based on user feedback and outcomes.

### 3. Core Features of the AI Recommendation Engine

1. **Personalized Course Suggestions**: Tailors recommendations based on user profiles, learning history, and career goals.
2. **Adaptive Learning Paths**: Adjusts course difficulty and suggests complementary content based on user performance.
3. **Skill Gap Analysis**: Identifies and recommends courses to bridge skill gaps for career advancement.
4. **Content Relevance Scoring**: Rates course content based on user engagement and outcomes to refine suggestions.
5. **Real-time Adaptation**: Continuously updates recommendations as users interact with the platform.
 
### 
 
   # Coursera's AI-Powered Recommendation Engine: Revolutionizing Virtual Tutoring
 
# Defense of Topic: AI-Driven Personalization in Online Learning Platforms

### 1. Introduction

In the rapidly evolving landscape of online education, AI-driven personalization has emerged as a game-changing technology. This report defends the thesis that Coursera's AI-powered recommendation engine represents a significant advancement in virtual tutoring, addressing critical challenges in online education such as engagement, relevance, and personalization.

Coursera's recommendation engine leverages advanced machine learning algorithms to analyze vast amounts of data, including user behavior, course content, and learning outcomes. This system forms the backbone of Coursera's ability to deliver personalized learning experiences at scale, making it an exemplar of AI application in education technology.

### 2. Overview of Coursera's Recommendation Engine

Coursera's AI-powered recommendation engine is a sophisticated system that forms the core of its personalization strategy. Key aspects include:

- **Data-Driven Insights**: Analyzes millions of data points from user interactions, course content, and learning outcomes.
- **Real-Time Personalization**: Provides dynamic, up-to-date course and content recommendations.
- **Multi-Faceted Approach**: Considers user goals, behavior, and global trends in generating recommendations.
- **Continuous Learning**: The system evolves and improves its recommendations based on user feedback and outcomes.

### 3. Core Features of the AI Recommendation Engine

1. **Personalized Course Suggestions**: Tailors recommendations based on user profiles, learning history, and career goals.
2. **Adaptive Learning Paths**: Adjusts course difficulty and suggests complementary content based on user performance.
3. **Skill Gap Analysis**: Identifies and recommends courses to bridge skill gaps for career advancement.
4. **Content Relevance Scoring**: Rates course content based on user engagement and outcomes to refine suggestions.
5. **Real-time Adaptation**: Continuously updates recommendations as users interact with the platform.
 
 //ODODAH CHIMDUGAM DAVID IS MY BEST FRIEND EVER!!!!
            // I KNOW HE IS A REAL ONE FR!... I AM EVER GRATEFUL TO HIM
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        $(document).ready(function() {
            // When the country dropdown changes
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode);

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                    // Filter states based on selected country code
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates);

                    // Populate the state dropdown with state_code as the value
                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.state_code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            // When the state dropdown changes
            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                console.log('Selected State Code:', selectedStateCode);

                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedStateCode) {
                    // Filter cities based on selected state code
                    const filteredCities = cities.filter(city => city.state_code === selectedStateCode);
                    console.log('Filtered Cities:', filteredCities);

                    // Populate the city dropdown
                    $.each(filteredCities, function(index, city) {
                        $('#cityDropdown').append(`<option value="${city.id}">${city.name}</option>`);
                    });
                }
            });
        });
    </script>
</body>
</html>
 
Nigeria
 
Lagos
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        $(document).ready(function() {
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode);

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates);

                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                console.log('Selected State Code:', selectedStateCode); // Debugging log for state code
            
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown
            
                if (selectedStateCode) {
                    // Filter cities based on the selected state code
                    const filteredCities = cities.filter(city => city.state_code === selectedStateCode);
                    console.log('Filtered Cities:', filteredCities); // Debugging log for cities
            
                    // Populate the city dropdown
                    $.each(filteredCities, function(index, city) {
                        $('#cityDropdown').append(`<option value="${city.id}">${city.name}</option>`);
                    });
                }
            });
        });
    </script>
</body>
</html>
 
$('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedStateCode) {
                    const filteredCities = cities.filter(city => city.state_code === selectedStateCode);
                    
                    $.each(filteredCities, function(index, city) {
                        $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                    });
                }
            });
 

                        } else {
                            console.log('No state selected');
                        }
                    });
                });
 
    }
                    });
                
                    $('#stateDropdown').change(function() {
                        const selectedStateCode = $(this).val();
                        console.log('Selected State Code:', selectedStateCode);
                        $('#cityDropdown').html('<option value="">Select City</option>');
                
                        if (selectedStateCode) {
                            const filteredCities = cities.filter(city => city.state_code === selectedStateCode);
                            console.log('Filtered Cities:', filteredCities);
                
                            if (filteredCities.length > 0) {
                                $.each(filteredCities, function(index, city) {
                                    $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                                });
                            } else {
                                console.log('No cities found for the selected state');
                                $('#cityDropdown').append('<option value="">No cities available</option>');
                            }
 
 $(document).ready(function() {
                    console.log('Countries:', countries);
                    console.log('States:', states);
                    console.log('Cities:', cities);
                
                    $('#countryDropdown').change(function() {
                        const selectedCountryCode = $(this).val();
                        console.log('Selected Country Code:', selectedCountryCode);
                
                        $('#stateDropdown').html('<option value="">Select State</option>');
                        $('#cityDropdown').html('<option value="">Select City</option>');
                
                        if (selectedCountryCode) {
                            const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                            console.log('Filtered States:', filteredStates);
                
                            $.each(filteredStates, function(index, state) {
                                $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                            });
                        } else {
                            console.log('No country selected')
 
  s.filter(city => city.state_code === selectedStateCode);
                    
                    $.each(filteredCities, function(index, city) {
                        $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                    });
                }
            });
        });
    </script>
 
   $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedStateCode) {
                    const filteredCities = citie
 
 <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        $(document).ready(function() {
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode);

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates);

 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }); %>
    </select>

    
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        $(document).ready(function() {
            
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val(); 
                console.log('Selected Country Code:', selectedCountryCode); 

               
                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates); 

                    
                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            
            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>'); 

                if (selectedStateCode) {
                   
                    $.get(`/cities?stateCode=${selectedStateCode}`, function(data) {
                        
                        $.each(data, function(index, city) {
                            $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                        });
                    }).fail(function() {
                        console.error('Error fetching cities'); 
                    });
                }
            });
        });
    </script>
</body>
</html>
 
// Reset city dropdown
 
// Log error if fetching fails
 
// Populate the city dropdown with fetched cities
 
 // Fetch cities based on selected state
 
// When the state dropdown changes
 
// Populate the state dropdown
 
// Log filtered states
 
    // Filter states based on selected country
 
 // Reset the state and city dropdowns
 
// Get the selected value
 
// Log the selected value
 
// When the country dropdown changes
 
// Pass the countries, states, and cities data to JavaScript
 
-- City Dropdown -->
 
<!-- State Dropdown -->
 
<!-- Country Dropdown -->
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        // Pass the countries, states, and cities data to JavaScript
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        $(document).ready(function() {
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val(); // Get the selected value
                console.log('Selected Country Code:', selectedCountryCode); // Log the selected value

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedCountryCode) {
                    // Filter states based on selected country
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates); // Log filtered states

                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedStateCode) {
                    // Fetch cities based on selected state
                    $.get(`/cities?stateCode=${selectedStateCode}`, function(data) {
                        $.each(data,                        // Populate the city dropdown with fetched cities
                        $.each(data, function(index, city) {
                            $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                        });
                    });
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        $(document).ready(function() {
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val(); // Get the selected value
                console.log('Selected Country Code:', selectedCountryCode); // Log the selected value

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedCountryCode) {
                    // Logic to filter states based on the selected country code
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates); // Log filtered states

                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedStateCode) {
                    // Fetch cities based on selected state
                    $.get(`/cities?stateCode=${selectedStateCode}`, function(data) {
                        $.each(data, function(index, city) {
                            $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                        });
                    });
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>; // Pass countries data
        const states = <%- JSON.stringify(states) %>;     // Pass states data
        const cities = <%- JSON.stringify(cities) %>;     // Pass cities data

        $(document).ready(function() {
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val(); // Get the selected value
                console.log('Selected Country Code:', selectedCountryCode); // Log the selected value

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedCountryCode) {
                    // Filter states based on selected country
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates); // Log filtered states

                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedStateCode) {
                    // Fetch cities based on selected state
                    $.get(`/cities?stateCode=${selectedStateCode}`, function(data) {
                        $.each(data, function(index, city) {
                            $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                        });
                    });
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>; // Pass countries data
        const states = <%- JSON.stringify(states) %>;     // Pass states data
        const cities = <%- JSON.stringify(cities) %>;     // Pass cities data

        $(document).ready(function() {
            $('#countryDropdown').change(function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode); // Debug log

                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedCountryCode) {
                    // Filter states based on selected country
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates); // Debug log

                    $.each(filteredStates, function(index, state) {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').change(function() {
                const selectedStateCode = $(this).val();
                $('#cityDropdown').html('<option value="">Select City</option>'); // Reset city dropdown

                if (selectedStateCode) {
                    // Fetch cities based on selected state
                    $.get(`/cities?stateCode=${selectedStateCode}`, function(data) {
                        $.each(data, function(index, city) {
                            $('#cityDropdown').append(`<option value="${city.code}">${city.name}</option>`);
                        });
                    });
                }
            });
        });
    </script>
</body>
</html>
 
// Fetch cities based on selected state
 
// Populate the city dropdown
 
 // When a state is selected
 
 // Filter states based on selected country
 
// Reset city dropdown
 
 // When a country is selected
 
 <!-- City Dropdown -->
 
 <!-- State Dropdown -->
 
<!-- Country Dropdown -->
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown">
        <option value="">Select City</option>
    </select>

    <script>
        // Data arrays available from the server-side
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        // Get references to the dropdown elements
        const countryDropdown = document.getElementById('countryDropdown');
        const stateDropdown = document.getElementById('stateDropdown');
        const cityDropdown = document.getElementById('cityDropdown');

        // Event listener for country dropdown change
        countryDropdown.addEventListener('change', () => {
            const selectedCountryCode = countryDropdown.value;

            // Clear and populate state dropdown based on selected country
            stateDropdown.innerHTML = '<option value="">Select State</option>';
            const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
            filteredStates.forEach(state => {
                const option = document.createElement('option');
                option.value = state.code;
                option.textContent = state.name;
                stateDropdown.appendChild(option);
            });

            // Reset the city dropdown
            cityDropdown.innerHTML = '<option value="">Select City</option>';
        });

        // Event listener for state dropdown change
        stateDropdown.addEventListener('change', () => {
            const selectedStateCode = stateDropdown.value;

            // Clear and populate city dropdown based on selected state
            cityDropdown.innerHTML = '<option value="">Select City</option>';
            const filteredCities = cities.filter(city => city.state_code === selectedStateCode);
            filteredCities.forEach(city => {
                const option = document.createElement('option');
                option.value = city.code;
                option.textContent = city.name;
                cityDropdown.appendChild(option);
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <!-- State Dropdown -->
    <label for="stateDropdown">State:</label>
    <select id="stateDropdown" disabled>
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown -->
    <label for="cityDropdown">City:</label>
    <select id="cityDropdown" disabled>
        <option value="">Select City</option>
    </select>

    <script>
        // Data arrays available from the server-side
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        // Get references to the dropdown elements
        const countryDropdown = document.getElementById('countryDropdown');
        const stateDropdown = document.getElementById('stateDropdown');
        const cityDropdown = document.getElementById('cityDropdown');

        // Event listener for country dropdown change
        countryDropdown.addEventListener('change', () => {
            const selectedCountryCode = countryDropdown.value;
            stateDropdown.innerHTML = '<option value="">Select State</option>';
            cityDropdown.innerHTML = '<option value="">Select City</option>';
            cityDropdown.disabled = true;

            if (selectedCountryCode) {
                // Filter states based on selected country code
                const filteredStates = states.filter(state => state.country_code === selectedCountryCode);

                // Populate the state dropdown
                filteredStates.forEach(state => {
                    const option = document.createElement('option');
                    option.value = state.code;
                    option.textContent = state.name;
                    stateDropdown.appendChild(option);
                });

                // Enable state dropdown if states are found
                stateDropdown.disabled = filteredStates.length === 0;
            } else {
                // Disable state dropdown if no country selected
                stateDropdown.disabled = true;
            }
        });

        // Event listener for state dropdown change
        stateDropdown.addEventListener('change', () => {
            const selectedStateCode = stateDropdown.value;
            cityDropdown.innerHTML = '<option value="">Select City</option>';

            if (selectedStateCode) {
                // Filter cities based on selected state code
                const filteredCities = cities.filter(city => city.state_code === selectedStateCode);

                // Populate the city dropdown
                filteredCities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.code;
                    option.textContent = city.name;
                    cityDropdown.appendChild(option);
                });

                // Enable city dropdown if cities are found
                cityDropdown.disabled = filteredCities.length === 0;
            } else {
                // Disable city dropdown if no state selected
                cityDropdown.disabled = true;
            }
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <!-- Dynamically generated country options -->
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <!-- Dynamically populated states -->
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        // Data passed from the server-side
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log('DOM ready');
            console.log('Countries:', countries);

            // Event listener for country dropdown change
            $('#countryDropdown').on('change', function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode);
                
                // Reset state and city dropdowns
                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                    // Filter states based on the selected country code
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    console.log('Filtered States:', filteredStates);

                    // Populate the state dropdown
                    filteredStates.forEach(state => {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });

                    // Enable the state dropdown if states are available
                    $('#stateDropdown').prop('disabled', filteredStates.length === 0);
                } else {
                    console.error('No country selected');
                }
            });

            // Event listener for state dropdown change
            $('#stateDropdown').on('change', function() {
                const selectedStateCode = $(this).val();
                console.log('Selected State Code:', selectedStateCode);

                // Reset city dropdown
                $('#city').html('<option value="">Select City</option>');

                if (selectedStateCode) {
                    // Filter cities based on the selected state code
                    const filteredCities = cities.filter(city => city.state_code === selectedStateCode);
                    console.log('Filtered Cities:', filteredCities);

                    // Populate the city dropdown
                    filteredCities.forEach(city => {
                        $('#city').append(`<option value="${city.code}">${city.name}</option>`);
                    });
                } else {
                    console.error('No state selected');
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <option value="">Select Countries</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <label for="stateDropdown">State:</label>
    <select id="stateDropdown">
        <!-- States will be dynamically populated -->
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log('DOM ready');
            
            $('#countryDropdown').on('change', function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode);
                
                // Clear and enable the state dropdown
                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    
                    // Populate state dropdown
                    filteredStates.forEach(state => {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });

                    // Enable the state dropdown
                    $('#stateDropdown').prop('disabled', false);
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').on('change', function() {
                const stateCode = $(this).val();
                $('#city').html('<option value="">Select City</option>');
                
                if (stateCode) {
                    const filteredCities = cities.filter(city => city.state_code === stateCode);
                    
                    // Populate city dropdown
                    filteredCities.forEach(city => {
                        $('#city').append(`<option value="${city.code}">${city.name}</option>`);
                    });
                } else {
                    console.log('No state selected');
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="countryDropdown">Country:</label>
    <select id="countryDropdown">
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <label for="stateDropdown">State:</label>
    <select id="stateDropdown" disabled>
        <!-- States will be populated dynamically -->
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log('DOM ready');
            
            $('#countryDropdown').on('change', function() {
                const selectedCountryCode = $(this).val();
                console.log('Selected Country Code:', selectedCountryCode);
                
                $('#stateDropdown').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');

                if (selectedCountryCode) {
                    const filteredStates = states.filter(state => state.country_code === selectedCountryCode);
                    
                    filteredStates.forEach(state => {
                        $('#stateDropdown').append(`<option value="${state.code}">${state.name}</option>`);
                    });
                    $('#stateDropdown').prop('disabled', filteredStates.length === 0);
                } else {
                    console.log('No country selected');
                }
            });

            $('#stateDropdown').on('change', function() {
                const stateCode = $(this).val();
                $('#city').html('<option value="">Select City</option>');
                
                if (stateCode) {
                    const filteredCities = cities.filter(city => city.state_code === stateCode);
                    
                    filteredCities.forEach(city => {
                        $('#city').append(`<option value="${city.code}">${city.name}</option>`);
                    });
                } else {
                    console.log('No state selected');
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="country">Country:</label>
    <select id="countryDropdown">
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>
    

    <label for="state">State:</label>
    <select id="stateDropdown" disabled>
       
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log('DOM ready');
            
            console.log('Total countries:', countries.length);
            console.log('Sample country:', countries[0]);
            console.log('Total states:', states.length);
            console.log('Total cities:', cities.length);
            console.log(states);
            
            // Log the HTML of the country dropdown
            console.log('Country dropdown HTML:', $('#country').html());
            
            $('#country').on('change', function() {
                console.log('Country dropdown changed');
                const countryCode = $(this).val();
                console.log('Selected Country Code:', countryCode);
                console.log('Selected Country Element:', this);
                console.log('Selected Option:', $(this).find('option:selected'));
                
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
                
                if (countryCode) {
                    const selectedCountry = countries.find(c => c.country_code === countryCode);
                    console.log('Selected Country Object:', selectedCountry);
                    
                    const filteredStates = states.filter(state => state.country_code === countryCode);
                    console.log('Filtered States:', filteredStates.length);
                    
                    if (filteredStates.length > 0) {
                        filteredStates.forEach(state => {
                            $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                        });
                    } else {
                        console.log('No states found for the selected country');
                    }
                } else {
                    console.log('No country selected (empty country code)');
                }
            });
    
            $('#state').on('change', function() {
                const stateId = $(this).val();
                console.log('Selected State ID:', stateId);
    
                $('#city').html('<option value="">Select City</option>');
    
                if (stateId) {
                    const filteredCities = cities.filter(city => city.state_id == stateId);
                    console.log('Filtered Cities:', filteredCities.length);
    
                    if (filteredCities.length > 0) {
                        filteredCities.forEach(city => {
                            $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                        });
                    } else {
                        console.log('No cities found for the selected state');
                    }
                } else {
                    console.log('No state selected');
                }
            });
        });
    </script>
</body>
</html>
 
 <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }) %>
    </select>
 
 <% states.forEach(state => { %>
            <option value="<%= state.code %>"><%= state.name %></option>
        <% }); %>
 
 <select id="state" name="state">
        <option value="">Select State</option>
    </select>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }) %>
    </select>

    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

   
    <script>a
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log('Total countries:', countries.length);
            console.log('Sample country:', countries[0]);
            console.log('Total states:', states.length);
            console.log('Total cities:', cities.length);
    
            // Log the HTML of the country dropdown
            console.log('Country dropdown HTML:', $('#country').html());
    
          
            $('#country').on('change', function() {
                const countryCode = $(this).val();
                console.log('Selected Country Code:', countryCode);
            
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
            
                if (countryCode) {
                    const selectedCountry = countries.find(c => c.country_code === countryCode);
                    console.log('Selected Country:', selectedCountry);
            
                    const filteredStates = states.filter(state => state.country_code === countryCode);
                    console.log('Filtered States:', filteredStates.length);
            
                    if (filteredStates.length > 0) {
                        filteredStates.forEach(state => {
                            $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                        });
                    } else {
                        console.log('No states found for the selected country');
                    }
                } else {
                    console.log('No country selected');
                }
            });
    
            $('#state').on('change', function() {
                const stateId = $(this).val();
                console.log('Selected State ID:', stateId);
    
                $('#city').html('<option value="">Select City</option>');
    
                if (stateId) {
                    const filteredCities = cities.filter(city => city.state_id == stateId);
                    console.log('Filtered Cities:', filteredCities.length);
    
                    if (filteredCities.length > 0) {
                        filteredCities.forEach(city => {
                            $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                        });
                    } else {
                        console.log('No cities found for the selected state');
                    }
                } else {
                    console.log('No state selected');
                }
            });
        });
    </script>
        
</body>
</html>
 
 });
 
  $('#country').on('change', function() {
                alert('Country changed!');
                const countryCode = $(this).val();
                console.log('Selected Country Code:', countryCode);
    
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
    
                if (countryCode) {
                    const selectedCountry = countries.find(c => c.country_code === countryCode);
                    console.log('Selected Country:', selectedCountry);
    
                    const filteredStates = states.filter(state => state.country_code === countryCode);
                    console.log('Filtered States:', filteredStates.length);
    
                    if (filteredStates.length > 0) {
                        filteredStates.forEach(state => {
                            $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                        });
                    } else {
                        console.log('No states found for the selected country');
                    }
                } else {
                    console.log('No country selected');
                }
 
  <script>
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log('Total states:', states.length);
          ole.log('No cities found for the selected state');
                    }
                } else {
                    console.log('No state selected');
                }
            });
        });
    </script>
 
  console.log('Total cities:', cities.length);
    
            $('#country').on('change', function() {
                const countryCode = $(this).val();
                console.log('Selected Country Code:', countryCode);
    
       
    
            $('#state').on('change', function() {
                const stateId = $(this).val();
                console.log('Selected State ID:', stateId);
    
                $('#city').html('<option value="">Select City</option>');
    
                if (stateId) {
                    const filteredCities = cities.filter(city => city.state_id == stateId);
                    console.log('Filtered Cities:', filteredCities.length);
    
                    if (filteredCities.length > 0) {
                        filteredCities.forEach(city => {
                            $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                        });
                    } else {
                        cons
 
         $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
    
                if (countryCode) {
                    const filteredStates = states.filter(state => state.country_code === countryCode);
                    console.log('Filtered States:', filteredStates.length);
    
                    if (filteredStates.length > 0) {
                        filteredStates.forEach(state => {
                            $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                        });
                    } else {
                        console.log('No states found for the selected country');
                    }
                } else {
                    console.log('No country selected');
                }
            });
 
<select id="state" name="state">
        <option value="">Select State</option>
 
<select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }) %>
    </select>
 
<label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }) %>
    </select>
 
        console.log('Filtered Cities:', filteredCities);  
    
                filteredCities.forEach(city => {
                    $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                });
            });
        });
    </script>
 
     const filteredStates = states.filter(state => state.country_code === countryCode);
                console.log('Filtered States:', filteredStates);  
    
                filteredStates.forEach(state => {
                    $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                });
            });
    
            $('#state').on('change', function() {
                const stateId = $(this).val();  
                console.log('Selected State ID:', stateId);  
    
                $('#city').html('<option value="">Select City</option>');
    
                const filteredCities = c
 
 <script>
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        $(document).ready(function() {
            console.log(states); 
            console.log(cities);  
    
            $('#country').on('change', function() {
                const countryCode = $(this).val();  
                console.log('Selected Country Code:', countryCode);
    
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
    
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

   
    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }) %>
    </select>

  
    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
        <% countries.forEach(country => { %>
            <option value="<%= state.country_code %>"><%= state.name %></option>
        <% }) %>
    </select>

   
    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
        <% countries.forEach(country => { %>
            <option value="<%= city.state_code %>"><%= city.name %></option>
        <% }) %>
    </select>

    <script>
        
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        
        $(document).ready(function() {
            console.log(states); 
            console.log(cities);  
    
           
            $('#country').on('change', function() {
                const countryCode = $(this).val();  
                console.log('Selected Country Code:', countryCode);
    
                
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
    
                
                const filteredStates = states.filter(state => state.country_code === countryCode);
                console.log('Filtered States:', filteredStates);  
    
               
                filteredStates.forEach(state => {
                    $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                });
            });
    
           
            $('#state').on('change', function() {
                const stateId = $(this).val();  
                console.log('Selected State ID:', stateId);  
    
                
                $('#city').html('<option value="">Select City</option>');
    
               
                const filteredCities = cities.filter(city => city.state_id == stateId);
                console.log('Filtered Cities:', filteredCities);  
    
                
                filteredCities.forEach(city => {
                    $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                });
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dropdown Example</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>
    
    <label for="country">Country:</label>
    <select id="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.code %>"><%= country.name %></option>
        <% }); %>
    </select>

    <label for="state">State:</label>
    <select id="state" disabled>
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" disabled>
        <option value="">Select City</option>
    </select>

    <script>
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        $('#country').on('change', function() {
            const countryCode = $(this).val();
            $('#state').empty().append('<option value="">Select State</option>').prop('disabled', true);
            $('#city').empty().append('<option value="">Select City</option>').prop('disabled', true);

            if (countryCode) {
                const filteredStates = states.filter(state => state.country_code === countryCode);
                filteredStates.forEach(state => {
                    $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                });
                $('#state').prop('disabled', false);
            }
        });

        $('#state').on('change', function() {
            const stateId = $(this).val();
            $('#city').empty().append('<option value="">Select City</option>').prop('disabled', true);

            if (stateId) {
                const filteredCities = cities.filter(city => city.state_id === stateId);
                filteredCities.forEach(city => {
                    $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                });
                $('#city').prop('disabled', false);
            }
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>Select Country, State, and City</h1>

   
    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.name %></option>
        <% }) %>
    </select>

  
    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

   
    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        
        $(document).ready(function() {
            console.log(states); 
            console.log(cities);  
    
           
            $('#country').on('change', function() {
                const countryCode = $(this).val();  
                console.log('Selected Country Code:', countryCode);
    
                
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
    
                
                const filteredStates = states.filter(state => state.country_code === countryCode);
                console.log('Filtered States:', filteredStates);  
    
               
                filteredStates.forEach(state => {
                    $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                });
            });
    
           
            $('#state').on('change', function() {
                const stateId = $(this).val();  
                console.log('Selected State ID:', stateId);  
    
                
                $('#city').html('<option value="">Select City</option>');
    
               
                const filteredCities = cities.filter(city => city.state_id == stateId);
                console.log('Filtered Cities:', filteredCities);  
    
                
                filteredCities.forEach(city => {
                    $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                });
            });
        });
    </script>
</body>
</html>
 
// Get selected state ID
 
// Debug log for selected state ID
 
// JSON data for states and cities
 
/ When the page loads, set up the dropdowns
 
// Log the cities array to the console
 
 // Log the states array to the console
 
// Get selected country code
 
 // When country is selected, populate the states dropdown
 
// Reset state and city dropdowns
 
// Filter states by selected country
 
 // Populate state dropdown with filtered states
 
// Debug log for filtered states
 
 // When state is selected, update city dropdown
 
// Reset city dropdown
 
 // Filter cities by selected state
 
// Debug log for filtered cities
 
/ Populate city dropdown with filtered cities
 
<script>
        // JSON data for states and cities
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;
    
        // When the page loads, set up the dropdowns
        $(document).ready(function() {

            console.log(states);  // Check that states data is loaded correctly
            console.log(cities);  // Check that cities data is loaded correctly

            // Initialize country dropdown (this is likely already working)
            $('#country').on('change', function() {
                const countryCode = $(this).val();  // Get selected country code
    
                // Reset state and city dropdowns
                $('#state').html('<option value="">Select State</option>');
                $('#city').html('<option value="">Select City</option>');
    
                // Filter states by selected country
                const filteredStates = states.filter(state => state.country_code === countryCode);
    
                // Populate state dropdown with filtered states
                filteredStates.forEach(state => {
                    $('#state').append(`<option value="${state.id}">${state.name}</option>`);
                });
            });
    
            // When state is selected, update city dropdown
            $('#state').on('change', function() {
                const stateId = $(this).val();  // Get selected state ID
    
                // Reset city dropdown
                $('#city').html('<option value="">Select City</option>');
    
                // Filter cities by selected state
                const filteredCities = cities.filter(city => city.state_id == stateId);
    
                // Populate city dropdown with filtered cities
                filteredCities.forEach(city => {
                    $('#city').append(`<option value="${city.id}">${city.name}</option>`);
                });
            });
        });
    </script>
 
 const states = <%= JSON.stringify(states) %>;
        const cities = <%= JSON.stringify(cities) %>;
 
<script>
        const states = <%= JSON.stringify(states) %>;
        const cities = <%= JSON.stringify(cities) %>;
    
        // When country is selected, populate the states dropdown
        $('#country').on('change', function() {
            const countryCode = $(this).val();  // Get selected country code
            const filteredStates = states.filter(state => state.country_code === countryCode);
    
            // Clear the state dropdown and add new options
            $('#state').html('<option value="">Select State</option>');
            filteredStates.forEach(state => {
                $('#state').append(`<option value="${state.id}">${state.name}</option>`);
            });
    
            // Clear the city dropdown since state has changed
            $('#city').html('<option value="">Select City</option>');
        });
    
        // When state is selected, populate the cities dropdown
        $('#state').on('change', function() {
            const stateId = $(this).val();  // Get selected state ID
            const filteredCities = cities.filter(city => city.state_id == stateId);
    
            // Clear the city dropdown and add new options
            $('#city').html('<option value="">Select City</option>');
            filteredCities.forEach(city => {
                $('#city').append(`<option value="${city.id}">${city.name}</option>`);
            });
        });
    </script>
 
exports.getStates = (req, res) => {
    const countryCode = req.query.countryCode;
    const filteredStates = states.filter(state => state.country_code === countryCode);
    res.json(filteredStates);
  };
 
let
 
 ity => city.state_id == stateId);
    
            // Clear the city dropdown and add new options
            $('#city').html('<option value="">Select City</option>');
            filteredCities.forEach(city => {
                $('#city').append(`<option value="${city.id}">${city.name}</option>`);
            });
        });
    </script>
 
<script>
        const states = <%= JSON.stringify(states) %>;
        const cities = <%= JSON.stringify(cities) %>;
    
        // When country is selected, populate the states dropdown
        $('#country').on('change', function() {
            const countryCode = $(this).val();  // Get selected country code
            const filteredStates = states.filter(state => state.country_code === countryCode);
    
            // Clear the state dropdown and add new options
            $('#state').html('<option value="">Select State</option>');
            filteredStates.forEach(state => {
                $('#state').append(`<option value="${state.id}">${state.name}</option>`);
            });
    
            // Clear the city dropdown since state has changed
            $('#city').html('<option value="">Select City</option>');
        });
    
        // When state is selected, populate the cities dropdown
        $('#state').on('change', function() {
            const stateId = $(this).val();  // Get selected state ID
            const filteredCities = cities.filter(c
 
<script
            const filteredCities = cities.filter(city => city.state_code === stateCode);
            console.log('Filtered cities:', filteredCities);

            filteredCities.forEach(city => {
                $('#city').append(`<option value="${city.name}">${city.name}</option>`);
            });
        });
    </script>
 
script>
        const states = <%= JSON.stringify(states) %>;
        const cities = <%= JSON.stringify(cities) %>;

        
        $('#country').change(function() {
            const countryCode = $(this).val();
            console.log('Selected country code:', countryCode);
            $('#state').empty().append('<option value="">Select State</option>');

            // Filter states based on selected country
            const filteredStates = states.filter(state => state.country_code === countryCode);
            console.log('Filtered states:', filteredStates);
            
            filteredStates.forEach(state => {
                $('#state').append(`<option value="${state.state_code}">${state.name}</option>`);
            });
        });

       
        $('#state').change(function() {
            const stateCode = $(this).val();
            console.log('Selected state code:', stateCode);
            $('#city').empty().append('<option value="">Select City</option>');

          
 
  // Filter cities based on selected state
 
 // Handle state selection to populate cities
 
// Handle country selection to populate states
 
 <!-- City Dropdown (initially empty) -->
 
  <!-- State Dropdown (initially empty) -->
 
 <!-- Country Dropdown -->
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
    </select>

    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <div id="debug"></div>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        function debug(message) {
            $('#debug').append(`<p>${message}</p>`);
            console.log(message);
        }

        debug(`Countries: ${countries.length}`);
        debug(`States: ${states.length}`);

        // Populate country dropdown
        function populateCountries() {
            const countrySelect = $('#country');
            countrySelect.empty().append('<option value="">Select Country</option>');
            if (Array.isArray(countries) && countries.length > 0) {
                const fragment = document.createDocumentFragment();
                countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.country_code;
                    option.textContent = country.country_name;
                    fragment.appendChild(option);
                });
                countrySelect.append(fragment);
                debug(`Populated ${countries.length} countries`);
            } else {
                debug('No countries data available');
            }
        }

        // Populate state dropdown based on selected country
        function populateStates(countryCode) {
            const stateSelect = $('#state');
            stateSelect.empty().append('<option value="">Select State</option>');
            const filteredStates = states.filter(state => state.country_code === countryCode);
            const fragment = document.createDocumentFragment();
            filteredStates.forEach(state => {
                const option = document.createElement('option');
                option.value = state.state_code;
                option.textContent = state.state_name;
                fragment.appendChild(option);
            });
            stateSelect.append(fragment);
            debug(`Populated ${filteredStates.length} states for country ${countryCode}`);
        }

        // Fetch and populate cities based on selected state
        function fetchCities(stateCode) {
            $.get(`/getCities?stateCode=${stateCode}`, function(cities) {
                const citySelect = $('#city');
                citySelect.empty().append('<option value="">Select City</option>');
                const fragment = document.createDocumentFragment();
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.city_name;
                    option.textContent = city.city_name;
                    fragment.appendChild(option);
                });
                citySelect.append(fragment);
                debug(`Populated ${cities.length} cities for state ${stateCode}`);
            });
        }

        // Event listeners
        $(document).ready(function() {
            debug('Document ready');
            populateCountries();

            $('#country').change(function() {
                const countryCode = $(this).val();
                debug(`Country selected: ${countryCode}`);
                if (countryCode) {
                    populateStates(countryCode);
                } else {
                    $('#state').empty().append('<option value="">Select State</option>');
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });

            $('#state').change(function() {
                const stateCode = $(this).val();
                debug(`State selected: ${stateCode}`);
                if (stateCode) {
                    fetchCities(stateCode);
                } else {
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
    </select>

    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <div id="debug"></div>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        function debug(message) {
            $('#debug').append(`<p>${message}</p>`);
            console.log(message);
        }

        debug(`Countries: ${countries.length}`);
        debug(`States: ${states.length}`);
        debug(`Cities: ${cities.length}`);

        // Populate country dropdown
        function populateCountries() {
            const countrySelect = $('#country');
            countrySelect.empty().append('<option value="">Select Country</option>');
            if (Array.isArray(countries) && countries.length > 0) {
                const fragment = document.createDocumentFragment();
                countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.country_code;
                    option.textContent = country.country_name;
                    fragment.appendChild(option);
                });
                countrySelect.append(fragment);
                debug(`Populated ${countries.length} countries`);
            } else {
                debug('No countries data available');
            }
        }

        // Populate state dropdown based on selected country
        function populateStates(countryCode) {
            const stateSelect = $('#state');
            stateSelect.empty().append('<option value="">Select State</option>');
            const filteredStates = states.filter(state => state.country_code === countryCode);
            const fragment = document.createDocumentFragment();
            filteredStates.forEach(state => {
                const option = document.createElement('option');
                option.value = state.state_code;
                option.textContent = state.state_name;
                fragment.appendChild(option);
            });
            stateSelect.append(fragment);
            debug(`Populated ${filteredStates.length} states for country ${countryCode}`);
        }

        // Populate city dropdown based on selected state
        function populateCities(stateCode) {
            const citySelect = $('#city');
            citySelect.empty().append('<option value="">Select City</option>');
            const filteredCities = cities.filter(city => city.state_code === stateCode);
            const fragment = document.createDocumentFragment();
            filteredCities.forEach(city => {
                const option = document.createElement('option');
                option.value = city.city_name;
                option.textContent = city.city_name;
                fragment.appendChild(option);
            });
            citySelect.append(fragment);
            debug(`Populated ${filteredCities.length} cities for state ${stateCode}`);
        }

        // Event listeners
        $(document).ready(function() {
            debug('Document ready');
            populateCountries();

            $('#country').change(function() {
                const countryCode = $(this).val();
                debug(`Country selected: ${countryCode}`);
                if (countryCode) {
                    populateStates(countryCode);
                } else {
                    $('#state').empty().append('<option value="">Select State</option>');
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });

            $('#state').change(function() {
                const stateCode = $(this).val();
                debug(`State selected: ${stateCode}`);
                if (stateCode) {
                    populateCities(stateCode);
                } else {
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });
        });
    </script>
</body>
</html>
 
const csv = require('csv-parser');
   const fs = require('fs');
   const path = require('path');

   let countries = [];
   let states = [];
   let cities = [];

   exports.loadData = (callback) => {
       if (typeof callback !== 'function') {
           throw new Error('Callback must be a function');
       }

       let count = 0;
       const totalCount = 3;

       fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
           .pipe(csv())
           .on('data', (row) => countries.push(row))
           .on('end', () => {
               count++;
               console.log(`Loaded ${countries.length} countries`);
               if (count === totalCount) {
                   callback();
               }
           });

       fs.createReadStream(path.join(__dirname, '../data/states.csv'))
           .pipe(csv())
           .on('data', (row) => states.push(row))
           .on('end', () => {
               count++;
               console.log(`Loaded ${states.length} states`);
               if (count === totalCount) {
                   callback();
               }
           });

       fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
           .pipe(csv())
           .on('data', (row) => cities.push(row))
           .on('end', () => {
               count++;
               console.log(`Loaded ${cities.length} cities`);
               if (count === totalCount) {
                   callback();
               }
           });
   };

   exports.getData = (req, res) => {
       exports.loadData(() => {
           console.log('Rendering dropdown with:', { 
               countriesCount: countries.length, 
               statesCount: states.length, 
               citiesCount: cities.length 
           });
           res.render('dropdown', { countries, states, cities });
       });
   };
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
    </select>

    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <div id="debug"></div>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        function debug(message) {
            $('#debug').append(`<p>${message}</p>`);
            console.log(message);
        }

        debug(`Countries: ${JSON.stringify(countries)}`);
        debug(`States: ${JSON.stringify(states)}`);
        debug(`Cities: ${JSON.stringify(cities)}`);

        // Populate country dropdown
        function populateCountries() {
            const countrySelect = $('#country');
            countrySelect.empty().append('<option value="">Select Country</option>');
            if (Array.isArray(countries) && countries.length > 0) {
                countries.forEach(country => {
                    countrySelect.append(`<option value="${country.country_code}">${country.country_name}</option>`);
                });
                debug(`Populated ${countries.length} countries`);
            } else {
                debug('No countries data available');
            }
        }

        // Populate state dropdown based on selected country
        function populateStates(countryCode) {
            const stateSelect = $('#state');
            stateSelect.empty().append('<option value="">Select State</option>');
            const filteredStates = states.filter(state => state.country_code === countryCode);
            filteredStates.forEach(state => {
                stateSelect.append(`<option value="${state.state_code}">${state.state_name}</option>`);
            });
            debug(`Populated ${filteredStates.length} states for country ${countryCode}`);
        }

        // Populate city dropdown based on selected state
        function populateCities(stateCode) {
            const citySelect = $('#city');
            citySelect.empty().append('<option value="">Select City</option>');
            const filteredCities = cities.filter(city => city.state_code === stateCode);
            filteredCities.forEach(city => {
                citySelect.append(`<option value="${city.city_name}">${city.city_name}</option>`);
            });
            debug(`Populated ${filteredCities.length} cities for state ${stateCode}`);
        }

        // Event listeners
        $(document).ready(function() {
            debug('Document ready');
            populateCountries();

            $('#country').change(function() {
                const countryCode = $(this).val();
                debug(`Country selected: ${countryCode}`);
                if (countryCode) {
                    populateStates(countryCode);
                } else {
                    $('#state').empty().append('<option value="">Select State</option>');
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });

            $('#state').change(function() {
                const stateCode = $(this).val();
                debug(`State selected: ${stateCode}`);
                if (stateCode) {
                    populateCities(stateCode);
                } else {
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
    </select>

    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%- JSON.stringify(countries) %>;
        const states = <%- JSON.stringify(states) %>;
        const cities = <%- JSON.stringify(cities) %>;

        console.log('Countries:', countries);
        console.log('States:', states);
        console.log('Cities:', cities);

        // Populate country dropdown
        function populateCountries() {
            const countrySelect = $('#country');
            countrySelect.empty().append('<option value="">Select Country</option>');
            countries.forEach(country => {
                countrySelect.append(`<option value="${country.country_code}">${country.country_name}</option>`);
            });
        }

        // Populate state dropdown based on selected country
        function populateStates(countryCode) {
            const stateSelect = $('#state');
            stateSelect.empty().append('<option value="">Select State</option>');
            const filteredStates = states.filter(state => state.country_code === countryCode);
            filteredStates.forEach(state => {
                stateSelect.append(`<option value="${state.state_code}">${state.state_name}</option>`);
            });
        }

        // Populate city dropdown based on selected state
        function populateCities(stateCode) {
            const citySelect = $('#city');
            citySelect.empty().append('<option value="">Select City</option>');
            const filteredCities = cities.filter(city => city.state_code === stateCode);
            filteredCities.forEach(city => {
                citySelect.append(`<option value="${city.city_name}">${city.city_name}</option>`);
            });
        }

        // Event listeners
        $(document).ready(function() {
            populateCountries();

            $('#country').change(function() {
                const countryCode = $(this).val();
                if (countryCode) {
                    populateStates(countryCode);
                } else {
                    $('#state').empty().append('<option value="">Select State</option>');
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });

            $('#state').change(function() {
                const stateCode = $(this).val();
                if (stateCode) {
                    populateCities(stateCode);
                } else {
                    $('#city').empty().append('<option value="">Select City</option>');
                }
            });
        });
    </script>
</body>
</html>
 
<!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>Select Country, State, and City</title>
       <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
   </head>
   <body>
       <h1>Select Country, State, and City</h1>

       <p>Debug Info:</p>
       <ul>
           <li>Countries: <%= countries.length %></li>
           <li>States: <%= states.length %></li>
           <li>Cities: <%= cities.length %></li>
       </ul>

       <label for="country">Country:</label>
       <select id="country" name="country">
           <option value="">Select Country</option>
           <% countries.forEach(country => { %>
               <option value="<%= country.country_code %>"><%= country.country_name %></option>
           <% }) %>
       </select>

       <label for="state">State:</label>
       <select id="state" name="state">
           <option value="">Select State</option>
       </select>

       <label for="city">City:</label>
       <select id="city" name="city">
           <option value="">Select City</option>
       </select>

       <script>
           const countries = <%= JSON.stringify(countries) %>;
           const states = <%= JSON.stringify(states) %>;
           const cities = <%= JSON.stringify(cities) %>;

           console.log('Countries:', countries);
           console.log('States:', states);
           console.log('Cities:', cities);


        $('#country').empty().append('<option value="">Select Country</option>');
        <% countries.forEach(country => { %>
            $('#country').append(`<option value="${country.country_code}">${country.country_name}</option>`);
        <% }) %>

      
        $('#country').change(function() {
            const countryCode = $(this).val();
            $('#state').empty().append('<option value="">Select State</option>');

          
            const filteredStates = states.filter(state => state.country_code === countryCode);
            filteredStates.forEach(state => {
                $('#state').append(`<option value="${state.state_code}">${state.state_name}</option>`);
            });
        });

       
        $('#state').change(function() {
            const stateCode = $(this).val();
            $('#city').empty().append('<option value="">Select City</option>');

          
            const filteredCities = cities.filter(city => city.state_code === stateCode);
            filteredCities.forEach(city => {
                $('#city').append(`<option value="${city.city_name}">${city.city_name}</option>`);
            });
        });
    </script>
</body>
</html>
 
const csv = require('csv-parser');
const fs = require('fs');
const path = require('path');

let countries = [];
let states = [];
let cities = [];

exports.loadData = (callback) => {
    if (typeof callback !== 'function') {
        throw new Error('Callback must be a function');
    }

    let count = 0;
    const totalCount = 3;

    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => countries.push(row))
        .on('end', () => {
            count++;
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => states.push(row))
        .on('end', () => {
            count++;
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => cities.push(row))
        .on('end', () => {
            count++;
            if (count === totalCount) {
                callback();
            }
        });
};

exports.getData = (req, res) => {
    exports.loadData(() => {
        res.render('dropdown', { countries, states, cities });
    });
};
 
       // Rest of your JavaScript code...
       </script>
   </body>
   </html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

 
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

   
    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.country_name %></option>
        <% }) %>
    </select>

  
    <label for="state">State:</label>
    <select id="
 
state" name="state">
        <option value="">Select State</option>
    </select>

  
    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        const countries = <%= JSON.stringify(countries) %>;
        const states = <%= JSON.stringify(states) %>;
        const cities = <%= JSON.stringify(cities) %>;
 
dataController.loadData();
 
  // Your code here
 



            }
        });

    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => cities.push(row))
        .on('end', () => {
            count++;
            if (count === totalCount) {
                callback();
            }
        });
};
 
exports.loadData = (callback) => {
    let count = 0;
    const totalCount = 3;

    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => countries.push(row))
        .on('end', () => {
            count++;
            if (count === totalCount) {
                callback();
            }
        });

    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => states.push(row))
        .on('end', () => {
            count++;
            if (count === totalCount) {
                callback();
 

exports.getData = (req, res) => {
    res.render('dropdown', { countries, states, cities });
};
 
exports.loadData = () => {
   
    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => countries.push(row))
        .on('end', () => {
            console.log('Countries CSV successfully processed:');
        });

   
    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => states.push(row))
        .on('end', () => {
            console.log('States CSV successfully processed:');
        });

   
    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => cities.push(row))
        .on('end', () => {
            console.log('Cities CSV successfully processed:');
        });
};
 
// Routes for dropdowns
 
 console.log('Cities CSV successfully processed:', cities);
 
 console.log('States CSV successfully processed:', states);
 
   console.log('Countries CSV successfully processed:', countries);
 
// Use routes
 
// Load CSV data on server startup
 
// Route to display the dropdowns with countries, states, and cities
 
// Route for the root URL to redirect to the dropdown page
 
 // Redirect to the dropdown page
 
  // Filter cities based on selected state
 
 // Handle state selection to populate cities
 
  // Filter states based on selected country
 
  // Handle country selection to populate states
 
  <!-- City Dropdown -->
 
  <!-- State Dropdown -->
 
 <!-- Country Dropdown -->
 
// Function to return the stored data for the dropdowns
 
 // Load cities
 
 // Load states
 
 // Load countries
 
// Load CSV data at server startup
 
const csv = require('csv-parser');
const fs = require('fs');
const path = require('path');

let countries = [];
let states = [];
let cities = [];

// Load CSV data at server startup
exports.loadData = () => {
    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => countries.push(row))
        .on('end', () => console.log('Countries CSV successfully processed'));

    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => states.push(row))
        .on('end', () => console.log('States CSV successfully processed'));

    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => cities.push(row))
        .on('end', () => console.log('Cities CSV successfully processed'));
};

// Function to return the stored data for the dropdowns
exports.getData = (req, res) => {
    res.render('dropdown', { countries, states, cities });
};
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country, State, and City</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Select Country, State, and City</h1>

    <!-- Country Dropdown -->
    <label for="country">Country:</label>
    <select id="country" name="country">
        <option value="">Select Country</option>
        <% countries.forEach(country => { %>
            <option value="<%= country.country_code %>"><%= country.country_name %></option>
        <% }) %>
    </select>

    <!-- State Dropdown (initially empty) -->
    <label for="state">State:</label>
    <select id="state" name="state">
        <option value="">Select State</option>
    </select>

    <!-- City Dropdown (initially empty) -->
    <label for="city">City:</label>
    <select id="city" name="city">
        <option value="">Select City</option>
    </select>

    <script>
        const states = <%= JSON.stringify(states) %>;
        const cities = <%= JSON.stringify(cities) %>;

        // Handle country selection to populate states
        $('#country').change(function() {
            const countryCode = $(this).val();
            $('#state').empty().append('<option value="">Select State</option>');

            const filteredStates = states.filter(state => state.country_code === countryCode);
            filteredStates.forEach(state => {
                $('#state').append(`<option value="${state.state_code}">${state.state_name}</option>`);
            });
        });

        // Handle state selection to populate cities
        $('#state').change(function() {
            const stateCode = $(this).val();
            $('#city').empty().append('<option value="">Select City</option>');

            const filteredCities = cities.filter(city => city.state_code === stateCode);
            filteredCities.forEach(city => {
                $('#city').append(`<option value="${city.city_name}">${city.city_name}</option>`);
            });
        });
    </script>
</body>
</html>
 
const csv = require('csv-parser');
const fs = require('fs');
const path = require('path');

// Data storage (to be populated at server startup)
let countries = [];
let states = [];
let cities = [];

// Function to load the CSV data at server startup
exports.loadData = () => {
    // Load countries
    fs.createReadStream(path.join(__dirname, '../data/countries.csv'))
        .pipe(csv())
        .on('data', (row) => {
            countries.push(row);
        })
        .on('end', () => {
            console.log('Countries CSV successfully processed');
        });

    // Load states
    fs.createReadStream(path.join(__dirname, '../data/states.csv'))
        .pipe(csv())
        .on('data', (row) => {
            states.push(row);
        })
        .on('end', () => {
            console.log('States CSV successfully processed');
        });

    // Load cities
    fs.createReadStream(path.join(__dirname, '../data/cities.csv'))
        .pipe(csv())
        .on('data', (row) => {
            cities.push(row);
        })
        .on('end', () => {
            console.log('Cities CSV successfully processed');
        });
};

// Function to return the stored data for the dropdowns
exports.getData = (req, res) => {
    res.render('dropdown', { countries, states, cities });
};
 
const express = require('express');
const router = express.Router();
const dataController = require('../controller/dataController');

// Route to display the dropdowns with countries, states, and cities
router.get('/dropdown', dataController.getData);

module.exports = router;
 
console.log('Current Directory:', __dirname);
 
app.use('/', countryRoutes);
 
Controll
 
st countryRoutes = require('./route/dataRoutes');
 
const axios = require('axios');

exports.getCountries = async (req, res) => {
    try {
        const response = await axios.get('https://restcountries.com/v3.1/all');
        const countries = response.data.map(country => ({
            code: country.cca2,
            name: country.name.common
        }));


        countries.sort((a, b) => a.name.localeCompare(b.name));
        res.render('countries', { countries });
    } catch (error) {
        console.error(error);
        res.render('countries', { countries: [] });
    }
};
 
const express = require('express');
const router = express.Router();
const countryController = require('../controller/dataController');

router.get('/countries', countryController.getCountries);

module.exports = router;
 
   next();
});


app.use('/', countryRoutes);
 
const countryRoutes = require('./route/dataRoutes');

const app = express();

app.set("view engine", "ejs");
app.use(express.static("public"));
app.use(express.urlencoded({ extended: true }));

mongoose.connect("mongodb://127.0.0.1:27017/Final year Project");

app.use(session({
    secret: "mysecretkey",
    resave: true,
    saveUninitialized: true,
}));

app.use(flash());

app.use((req, res, next) => {
    res.locals.message = req.flash("message");
    res.locals.error_msg = req.flash("error_msg");
 
// Sort countries alphabetically by name
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Country</title>
</head>
<body>
    <h1>Select Country</h1>
    <form action="/submit" method="POST"> <!-- Update the action as needed -->
        <label for="country">Country:</label>
        <select id="country" name="country">
            <option value="">Select Country</option>
            <% countries.forEach(country => { %>
                <option value="<%= country.code %>"><%= country.name %></option>
            <% }) %>
        </select>
        <button type="submit">Submit</button>
    </form>
</body>
</html>
 
// Sort countries alphabetically by name
 
